{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MSBA 504: Data Management  University of San Diego, Fall 2025 <p>Canvas Gradescope Student Hours</p> <p> Chris Young, MBA Adjunct Faculty  </p>"},{"location":"#course-calendar","title":"Course Calendar","text":"Week 1 Tue, Sep 09 LECT IntroductionER_Models Tue, Sep 09 DEMO Create_Conceptual_ERD Sun, Sep 14 QUIZ Quiz_1 Sun, Sep 14 HMWK HW1_Create_ERD Week 2 Tue, Sep 16 LECT Relational_Databases Tue, Sep 16 DEMO Implement_Conceptual_ERD Tue, Sep 16 PART CP0_Autograder_Warmup Sun, Sep 21 QUIZ Quiz_2 Week 3 Tue, Sep 23 DEMO Create_Database_ERD Tue, Sep 23 PART CP1_Create_Database Sun, Sep 28 HMWK HW2_Create_Database_ERD Week 4 Tue, Sep 30 LECT SQL_Basics Tue, Sep 30 DEMO CRUD_Operations Tue, Sep 30 PART CP2_CRUD_Operations Sun, Oct 05 QUIZ Quiz_3 Sun, Oct 05 HMWK HW3_CRUD_Operations Week 5 Tue, Oct 07 LECT Intermediate_SQL_1 Tue, Oct 07 DEMO Aggregating_Data_JOINs Tue, Oct 07 PART CP3_Intermediate_SQL_1 Week 6 Tue, Oct 14 LECT Intermediate_SQL_2 Tue, Oct 14 DEMO CASE_Custom_JOINs Tue, Oct 14 PART CP4_Intermediate_SQL_2 Sun, Oct 19 QUIZ Quiz_4 Sun, Oct 19 HMWK HW4_Intermediate_SQL Sun, Oct 19 PROJ GP1_Create_Database_ERD Week 7 Tue, Oct 21 LECT Advanced_SQL_1 Tue, Oct 21 PART CP5_Transform_Load_Data Week 8 Tue, Oct 28 LECT Advanced_SQL_2Advanced_Database_Concepts Tue, Oct 28 DEMO Subquery_CTE_Window_Functions Sun, Nov 02 QUIZ Quiz_5 Sun, Nov 02 PROJ GP2_Transform_Load_Data Week 9 Tue, Nov 04 PROJ GP3_Hackathon Sun, Nov 09 HMWK HW5_Advanced_SQL Week 10 Tue, Nov 11 EXAM Final_Exam"},{"location":"assignments/","title":"Assignments","text":""},{"location":"assignments/#assignment-overview","title":"Assignment Overview","text":"Assignment Code Document Question Based Peer Collaboration Group Submission AI Assistance HW1_Create_ERD \u274c \u2705 \u274c \u2705 (Required 3 to 5) \u2705 \u2705 HW2_Create_ERD_Database \u2705 \u2705 \u274c \ud83d\udca1 (Optional Up to 5) \u2705 \u2705 HW3_CRUD_Operations \u2705 \u274c \u274c \u274c \u274c \u2705 HW4_Intermediate_SQL \u2705 \u274c \u274c \u274c \u274c \u2705 HW4_Advanced_SQL \u2705 \u274c \u274c \u274c \u274c \u2705 CP0_Autograder_Warmup \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 CP1_Create_Database \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 CP2_CRUD_Operations \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 CP3_Intermediate_SQL_1 \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 CP4_Intermediate_SQL_2 \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 CP5_Transform_Load_Data \u2705 \u274c \u274c \ud83d\udca1 (Optional Up to 5) \u274c \u2705 Quiz_1 \u274c \u274c \u2705 \u274c \u274c \u274c Quiz_2 \u274c \u274c \u2705 \u274c \u274c \u274c Quiz_3 \u274c \u274c \u2705 \u274c \u274c \u274c Quiz_4 \u274c \u274c \u2705 \u274c \u274c \u274c Quiz_5 \u274c \u274c \u2705 \u274c \u274c \u274c Final_Exam_P1 \u274c \u274c \u2705 \u274c \u274c \u274c Final_Exam_P2 \u2705 \u274c \u274c \u274c \u274c \u274c GP1_Create_ERD_Database \u2705 \u2705 \u274c \u2705 (Required 3 to 5) \u2705 \u2705 GP2_Transform_Load_Data \u2705 \u274c \u274c \u2705 (Required 3 to 5) \u2705 \u2705 GP3_Hackathon \u2705 \u274c \u274c \u2705 (Required 3 to 5) \u2705 \u2705 <ul> <li>Code: <code>.yaml</code> file templates are used for each assignment that requires a code submission. This formatting allows for autograder functionality without the need to submit separate query files for every question in the assignment. </li> <li>Document: <code>pdf</code> files are used for free-form responses/images based on assignment instructions. </li> <li>Question Based: Quizzes/Exams will have True/False, multiple choice, and matching questions completed on Canvas.</li> <li>Collaboration indicates the maximum number of students allowed when collaboration is permitted for the assignment.</li> <li>Group Submision indicates whether the assignment is a group submission on Canvas/Gradescope.</li> <li>AI Assistance indicates whether the use of AI tools such as ChatGPT is permitted is permitted for the assignment.</li> </ul> <p>Note</p> <p>Please pay close attention to the assignments that have the \ud83d\udca1 optional peer collaboration but \u274c for group submission. This means you can collaborate with your peers on assignment completion but you MUST submit the assignment individually to receive credit.</p>"},{"location":"assignments/#autograder-formatting","title":"Autograder Formatting","text":"<p>Autograder functionality on Gradescope is utilized for HW2 - HW5, all CP activities and GP assignments, and Final_Exam_P2. This enables immediate grading of your code based assignments.</p> <p>Steps for Submission:</p> <ol> <li>Download the Assignment Files: All homework and group project assignment files will be provided on Canvas. </li> <li>Input Your Answers: Populate the <code>submission.yaml</code> file with your responses for each respective question. Be sure to follow assignment instructions as there may be some required code provided in the starter <code>submission.yaml</code> file. </li> <li>Formatting Reference: See the example <code>submission.yaml</code> file below to understand the required format. Critical components include the use of the \"pipe\" character for multiline strings and proper indentation. Incorrect formatting can result in the autograder misreading your submission.</li> </ol> <p><pre><code>- question: 1\n  answer: |\n    SELECT * FROM student;\n\n- question: 2\n  answer: |\n    INSERT INTO student (student_id, last_name, first_name, email_address) VALUES \n    (100001, 'Doe', 'Jane','jane.doe@domain.edu');\n</code></pre> Additional Formatting Notes:</p> <ul> <li>The <code>submission.yaml</code> file will be provided complete with all of the required questions for the assignment. </li> <li>Do NOT modify the \"question\" sections in the <code>submission.yaml</code> file.</li> <li>Do NOT change the name of the <code>submission.yaml</code> file provided for the assignment.</li> <li>Your code MUST be indented and should NOT be left aligned with <code>answer: |</code></li> <li>To ensure accurate formatting, edit/paste your code into a text editor that supports <code>.yaml</code> files.</li> </ul> <p>Note</p> <p>The <code>submission.yaml</code> file provided for the assignment will be the same file name for all Code assignments. Recommend you create a folder structure on your computer for each assignment to keep the assignment files organized.</p> <p>Submitting Your Work:</p> <ul> <li>Before submission, validate your <code>submission.yaml</code> file with a yaml checker or utilize a plain text editor that highlights syntax errors with red squiggly lines.</li> <li>Upload/Drag your completed <code>submission.yaml</code> file to Gradescope for the respective assignment.</li> <li>You can re-submit your assignment multiple times before the late submission due date.</li> </ul> <p>ChatGPT Suggested Prompt</p> <p>I need help formatting a <code>.yaml</code> file for my assignment. Below is the file I currently have (it may not be in <code>.yaml</code> format yet). Please reformat it correctly into valid <code>.yaml</code> and explain any important changes you made so I can learn from it.</p>"},{"location":"assignments/#autograder-feedback","title":"Autograder Feedback","text":"<p>In most situations, the Autograder will attempt to evaluate all questions and provide a response so you get the Autograder Output instead of just a Gradescope error. This means you will get a score for your submission but you can re-submit your assignment multiple times before the late submission due date. </p> <p>The Autograder is designed to ONLY provide high level feedback in response to several known submission problems. Below are examples for each with Autograder Output screenshots.    </p>"},{"location":"assignments/#no-submissionyaml-file","title":"No <code>submission.yaml</code> file","text":""},{"location":"assignments/#invalid-yaml-syntax","title":"Invalid <code>.yaml</code> Syntax","text":""},{"location":"assignments/#invalid-sql-syntax","title":"Invalid <code>SQL</code> Syntax","text":"<p>Note</p> <p>The Autograder output indicates some SQL parse error near <code>SELECT</code> in Question 1. This is an example with a missing <code>;</code> in between two SQL statements for the same question.</p>"},{"location":"assignments/#missing-questionanswer","title":"Missing Question/Answer","text":""},{"location":"assignments/#incorrect-column-names","title":"Incorrect Column Names","text":"<p>If the only difference in your solution is incorrect column names, the Autograder will alert you to the expected column names and only subtract 1.0 from your score. This is designed to prevent you from spending a lot of time debugging your code solely for mismatching column names.</p> <p></p> <p>Warning</p> <p>The Autograder is not designed to provide any other feedback beyond the above examples. Be sure to run and compare your output to the sample output in the assignment instructions. Some questions may NOT have sample output as it could provide too much leading information about the correct solution.</p>"},{"location":"syllabus/","title":"Syllabus","text":"MSBA 504: Data Management University of San Diego | Fall 2025: 2 Units"},{"location":"syllabus/#course-overview","title":"COURSE OVERVIEW","text":""},{"location":"syllabus/#course-description","title":"Course Description","text":"<p>Databases are the backbone of the digital world, storing most global data and enabling the seamless operation of most businesses. In this course, you will learn to design and visually represent database structures and develop practical skills in implementing these designs using relational database concepts. Central to this course is the mastery of Structured Query Language (SQL), the standard language for interacting with relational databases. You will gain hands-on experience in writing and optimizing SQL queries, from basic to advanced levels, using a variety of open-source database platforms. Additionally, the course will introduce you to essential topics in database architecture and NoSQL databases. By the end of the course, you will be proficient in creating, modifying, retrieving, and analyzing data, preparing you with the essential skills needed to drive data-informed decisions in any professional setting.</p>"},{"location":"syllabus/#course-details","title":"Course Details","text":"<p>Dates: 9-Sep-2025 - 11-Nov-2025 Location: KCBE-328 Day/Time: Tue 4:00PM - 6:50PM  </p>"},{"location":"syllabus/#instructor-information","title":"Instructor Information","text":"<p>Instructor: Chris Young, MBA Office Hours: Click here to schedule an online Zoom appointment.</p>"},{"location":"syllabus/#course-learning-outcomes","title":"Course Learning Outcomes","text":"<p>At the conclusion of the course, you should be able to:</p> <ul> <li>Understand fundamental concepts and techniques in data management</li> <li>Learn about conceptual and logical database design, indexes and normalization</li> <li>Acquire foundational SQL and relational database system skills</li> <li>Gain extensive hands-on practice writing intermediate to advanced level SQL queries</li> <li>Introduce other database topics including database architecture, NoSQL database concepts, and Big Data</li> </ul>"},{"location":"syllabus/#course-materials","title":"COURSE MATERIALS","text":""},{"location":"syllabus/#textbook","title":"Textbook","text":"<p>Database Systems: Design, Implementation, &amp; Management (14th Edition) by Carlos Coronel and Steven Morris Copyright \u00a9 2023 | ISBN 978-0357673034</p> <p>This textbook is highly recommended but not required for the course. It provides comprehensive coverage of database design concepts, implementation techniques, and management practices. The book is available for purchase from most major retailers, including Amazon.</p>"},{"location":"syllabus/#course-resources","title":"Course Resources","text":"<ul> <li>All lecture slides, resources, and assignments are provided on this course website, GitHub repository, or Canvas.</li> <li>All assignments will be submitted on Canvas/Gradescope.</li> <li>All quizzes will be completed on Canvas.</li> <li>All course announcements will occur through Canvas.</li> </ul>"},{"location":"syllabus/#required-technology","title":"Required Technology","text":"<p>This is a data management class, and we will be utilizing a variety of software and apps throughout the course. All demo and homework resources will mention the technology requirements but below is a list of software that you will need to install on your computer.</p> <ul> <li>A plain text editor such as VS Code</li> <li>DB Browser for SQLite</li> <li>DBeaver Community Edition OPTIONAL</li> <li>MySQL Workbench 8.0</li> <li>Anaconda Distribution of Python and other tools</li> </ul>"},{"location":"syllabus/#course-content-policies","title":"COURSE CONTENT &amp; POLICIES","text":""},{"location":"syllabus/#grade-distribution","title":"Grade Distribution","text":"Assignment % of Total Grade 500 Total Points Homework Assignments (HW) 35 175 (35 each) Class Participation Assignments (CP) 15 75 (15 each) Conceptual Lecture Quizzes 15 75 (15 each) Group Project (GP) 15 75 (25 each) Final Exam 20 100"},{"location":"syllabus/#grading-scale","title":"Grading Scale","text":"Final Grade % of 500 Points A &gt;=93% A- 90-92.99% B+ 88-89.99% B 83-87.99% B- 80-82.99% C+ 78-79.99% C 73-77.99% C- 70-72.99% D+ 68-69.99% D 63-67.99% D- 60-62.99% F &lt;60%"},{"location":"syllabus/#homework","title":"Homework","text":"<p>There are 5 homework assignments consisting of problem-solving and SQL based programming assignments. While you are allowed to use AI tools to support your learning during homework, it is essential to ensure you fully understand the reasoning and process behind the solutions. AI will not be permitted during exams, so developing your ability to work through problems independently is critical for success. </p>"},{"location":"syllabus/#quizzes","title":"Quizzes","text":"<p>There are 5 quizzes that focus primarily on the conceptual materials covered in the lectures and textbook. The format will vary between True/False, multiple choice, matching and fill in the blank style questions. Quizzes should be straightforward if you are attending class and keeping up with the material. At least 5 out of the 15 questions for each quiz are selected from the lecture Slido quizzes. Quizzes are just a way to make sure you keep up with studying and do not fall too far behind as this class really builds on each previous week. Quizzes are completed on Canvas and by yourself with no collaboration/communication with any other students or AI tools.</p> <p>Tip</p> <p>Use homework and quiz assignments as an opportunity to practice and solidify your understanding, so you\u2019re well-prepared for exam-style questions.</p>"},{"location":"syllabus/#class-participation","title":"Class Participation","text":"<p>There are 5 class participation assignments that are designed to help you learn by doing, first by following along with instructor demos, then by immediately applying the same concepts on your own using materials from the current lecture/demo materials. Each participation assignment is designed to be finished during class, but late submission is permitted by the end of the lecture day.</p> <p>Class Attendance</p> <p>The goal is to make lectures worth your while to attend. Some class dates may only consist of a lecture but the vast majority of classes will involve hands-on practice with database and SQL tools. Regular attendance is very important to your success in this course. </p>"},{"location":"syllabus/#group-project","title":"Group Project","text":"<p>There are 3 group project assignments that you will be able to collaborate with 3-5 classmates on a real-world dataset to apply all skills learned in the course, including ER modeling, database design, normalization and data loading, and SQL query construction.</p>"},{"location":"syllabus/#final-exam","title":"Final Exam","text":"<p>The final exam is open-note and completed online by yourself with no collaboration/communication with any other students and AI tools. No late exams are permitted, except for extenuating circumstances. Please reach out as early as possible if you know something will prevent you from completing the exam on the designated date.  </p>"},{"location":"syllabus/#late-submission-policy","title":"Late Submission Policy","text":"<p>There is a 24-hour grace period for all homework assignments with NO late penalty. Assignment submissions will NOT be accepted after the grace period. This policy is intended to be a safety net in case you experience any difficulties submitting your assignment on time. Do not view the grace period as the true due date for the assignment. If you miss an assignment due date, it is likely that you are not managing your time effectively and will need to adjust your planning and study habits. Please note that any excuse for not submitting assignments on time will not be accepted AFTER the 24-hour grace period. If you have extenuating circumstances, you must contact the professor BEFORE the assignment due date.</p>"},{"location":"syllabus/#regrade-policy","title":"Regrade Policy","text":"<p>The intent of the regrade policy is to protect students from serious issues in grading. Email the professor within 72 hours and provide evidence for why your answer is correct and merits a regrade (i.e. a specific reference to something said in a lecture, the readings, or office hours). Make sure you confer with your team first on any group completed project and submit one regrade request after your team comes to a consensus.</p>"},{"location":"syllabus/#university-policy-statements","title":"UNIVERSITY POLICY STATEMENTS","text":""},{"location":"syllabus/#academic-honesty-statement","title":"Academic Honesty Statement","text":"<p>USD\u2019s policy on academic integrity is expressly integrated into this course. Please consult the Rules of Conduct page to review this policy. Any deviation from the standards of this policy may result in a grade of \u201cF\u201d for the course. Because most of the work in this course must be your own, any unauthorized assistance will be considered a violation of the academic integrity policy. If you have questions about the propriety of your work or other participants\u2019 conduct concerning this course, I am readily available to offer an interpretation of this policy.</p>"},{"location":"syllabus/#disability-statement","title":"Disability Statement","text":"<p>It is University of San Diego policy not to discriminate against qualified students with a documented disability in its educational programs, activities or services. If you have a disability-related need for accommodation(s) in this class, contact the Student Affairs office for assistance.</p>"},{"location":"syllabus/#general-student-conduct","title":"General Student Conduct","text":"<p>The University of San Diego School of Business expects its students to always conduct themselves in a professional manner. Its students are generally individuals who are preparing for career employment. An integral part of their career and professional development is the expectation that they will conduct themselves during the educational processes in the same manner as will be expected in an employment situation. The University of San Diego Student Code of Rights and Responsibilities is published online at The Student Code of Rights and Responsibilities.</p>"},{"location":"syllabus/#food-insecurity-pantry","title":"Food Insecurity &amp; Pantry","text":"<p>The goal of Toreros Against Hunger at the University of San Diego is to serve as occasional food relief for University of San Diego students experiencing food insecurity while actively decreasing the amount of food going to waste on campus.</p> <p>Food insecurity broadly defined is \u201cthe state of being without reliable access to sufficient quantity of affordable, nutritious food.\u201d Indicators of food insecurity include skipping meals and/or cutting the size of meals due to lack of financial resources, experiencing hunger but not eating and/or the inability to afford balanced meals.</p>"},{"location":"syllabus/#counseling-center","title":"Counseling Center","text":"<p>The Counseling Center strives to facilitate students' personal growth and enhance their academic success through accessible, culturally congruent clinical and outreach services. We work in collaboration with other Wellness and university departments and community partners.</p> <p>A counselor-on call is always available to consult about after-hours urgent psychological concerns. The counselor-on call can be reached by calling 619-260-4655 (24 hours a day, 7 days a week). Please contact the Department of Public Safety to access emergency services (x2222 on any campus telephone, otherwise call 619-260-2222).</p> <p>The 24-hour San Diego Access and Crisis Line (1-888-724-7240) also offers crisis intervention, information, and referrals.</p>"},{"location":"syllabus/#course-evaluations","title":"Course Evaluations","text":"<p>An online evaluation will be made available to you near the end of this course. Your timely and considered feedback is valuable to us and an important element of your learning experience.</p> <p>Notice</p> <p>This syllabus is subject to change based on the needs of the class; I will make sure to notify you in class and/or through a Canvas announcement.</p>"},{"location":"demos/01_create_conceptual_erd/","title":"Create a Conceptual ERD","text":""},{"location":"demos/01_create_conceptual_erd/#background","title":"Background","text":"<p>SD-Med is a small, family-owned doctor's clinic that has been serving the community for over 20 years. The clinic has developed a substantial patient base, but it currently relies on a paper-based system to manage patient records, appointment scheduling, and other operational tasks. Recognizing the need to modernize, SD-Med plans to implement a comprehensive digital database system. This transition aims to enhance operational efficiency, improve data accuracy, and ultimately provide better patient care.</p> <p>Note</p> <p>We will only consider entity relationship data modeling concepts for this business scenario and ignore any potential HIPAA or privacy related constraints. Certain aspects of this example have been abbreviated for the purposes of this demo. The scenario is not intended to represent a complete depiction of a real-world medical clinic.</p>"},{"location":"demos/01_create_conceptual_erd/#business-requirements","title":"Business Requirements","text":"<p>After a series of in-depth interviews with staff, owners and doctors, we have identified the following requirements.</p> <ul> <li>Each clinic has employees, such as administrators, nurses, maintenance staff, etc., and an employee can only work at a single clinic.  <ul> <li>Clinic information includes a unique clinic id, the name of the clinic (used by employees to refer to each location) and phone.  </li> <li>Employee information includes a unique employee id assigned by the company, name (first and last), address (street, city, state, and zip), email, and phone (home and mobile)</li> </ul> </li> <li>A doctor can have multiple specialties (there are over 40 different specialties across all doctors that work at the clinic) and information about the doctor includes a unique doctor id, and name (prefix, first, last, suffix).</li> <li>A patient must be assigned a primary doctor but not all doctors provide primary care.<ul> <li>Patient information includes a unique patient id assigned by the clinic, name (first and last), date of birth (dob), age, phone (home and mobile), and address (street, city, state, and zip)</li> </ul> </li> <li>A patient can attend appointments with many different specialists, but each appointment is with one doctor at a single clinic.</li> <li>A doctor can hold many appointments with different patients as needed for demand and patient need.<ul> <li>A unique appointment id is assigned at the time of scheduling for ease of identification since doctor information may not be known and/or can change up until the day of the appointment. Additional information about the appointment include the appt date time as well as the status (scheduled, completed, cancelled).</li> </ul> </li> </ul>"},{"location":"demos/01_create_conceptual_erd/#before-getting-started","title":"Before Getting Started","text":"<ol> <li>Understand the Business Context: Before jumping into the diagram tool, thoroughly understand the business requirements and make notes of the real-world entities relevant for SD-Med.  </li> <li>Identify all Entities: Make note of potential strong and weak entities.  </li> <li>Consider Relationships: Identify in the requirements potential relationships that are one-to-one, one-to-many or many-to-many.  </li> <li>Identify all Attributes: Make note of simple vs. composite attributes, single vs. multi-valued attributes, if the business requirements referenced any derived attributes as well as any potential key attributes.</li> </ol> Why are we learning Chen Notation when most ERD tools use Crow's Foot notation? <ol> <li>Allows you to think more conceptually about the business processes and how they might evolve into a database design.</li> <li>Forces you to think about the different types of attributes that are required for each entity and how they may be formalized in the design.</li> <li>The format does lend itself well to a group project for team building and collaboration. </li> </ol>"},{"location":"demos/01_create_conceptual_erd/#chen-notation-symbol-quick-reference","title":"Chen Notation Symbol Quick Reference","text":""},{"location":"demos/01_create_conceptual_erd/#create-new-diagram","title":"Create New Diagram","text":"<p>Go to draw.io (app.diagrams.net).</p> <p></p> <p>Click on Change storage and then choose one of the cloud storage options such as Google Drive, OneDrive or Dropbox and authorize the app (if needed).</p> <p> </p> <p>Click on the blue Create New Diagram button. Give the diagram a meaningful name in the top left, select Blank Diagram and click on Create.</p> <p></p> <p>Confirm options and click on Save.</p> Tips <ul> <li>Place all entities on the blank diagram first.  </li> <li>Connect entities with their relationships but don\u2019t worry about getting the cardinality correct on the first attempt.  </li> <li>You can always update the cardinality symbols on the relationship lines later.</li> <li>You may find that you need to rearrange the diagram a little so it flows well and you have enough space before adding the attributes to the diagram.  </li> <li>The auto rearrange layout option may not work very well so it is good to do some preliminary organization at this point.  </li> <li>Place all attributes on the diagram first and then connect attributes with their entities.</li> </ul>"},{"location":"demos/01_create_conceptual_erd/#create-entities","title":"Create Entities","text":"<p>Create rectangles for each entity. Be sure to identify any weak entities that are dependent on a strong entity or associative entities. </p> <p>In this business scenario, <code>appointment</code> could be a weak entity with identifying relationships to <code>patient</code>, <code>doctor</code>, <code>clinic</code>, as well as, <code>date</code> and <code>time</code>. This presents potential design challenges since changes to the appointment such as doctor reassignment, time and date changes all force primary key changes in <code>appointment</code>. The M:N relationship between <code>patient</code> and <code>doctor</code> is resolved through the <code>appointment</code> associate entity.</p> <p></p> <p>Note</p> <p>All applicable objects can be found under the Entity Relation Shapes section.</p>"},{"location":"demos/01_create_conceptual_erd/#create-relationships","title":"Create Relationships","text":"<p>Create diamonds for each relationship. Connect entities with their relationship lines and corresponding cardinality (1, M, N). A relationship that is total participation uses double lines but you can always update that later. </p> <p></p>"},{"location":"demos/01_create_conceptual_erd/#create-attributes","title":"Create Attributes","text":"<p>Create ovals for all attributes around the corresponding entity and connect to the entity with a solid line.</p> <p></p> <p>Note</p> <p>Recall key attributes will have a solid underline whereas a partial key attribute will have a dashed underline, multi-valued attributes will have an oval with double lines, derived attributes will have an oval with dashed lines.</p>"},{"location":"demos/01_create_conceptual_erd/#conclusion","title":"Conclusion","text":"<p>In this demo, we analyzed business requirements for SD-Med and created an entity-relationship diagram (ERD) to serve as the conceptual data model.</p>"},{"location":"demos/02_implement_erd/","title":"Implement Conceptual ERD","text":""},{"location":"demos/02_implement_erd/#overview","title":"Overview","text":"<p>In this demo, we will get some hands-on practice with the concepts we have learned so far in the Relational Databases lecture and also learn about SQLite, the most used database engine in the world. SQLite is a lightweight relational database engine that is often used for small and/or embedded databases because it doesn't require a separate server process and is easy to integrate into applications. The entire database including all of the tables, indices, and the data itself is stored in the database file on your computer. SQLite is highly portable and many desktop applications and mobile apps use it to store their data.</p> Important SQLite Considerations <p>When working with SQLite, be aware of the following important differences from larger relational database systems:</p> <ol> <li> <p>Type Affinity (Not Strict Typing) SQLite uses type affinity, which means columns have a recommended type but do not strictly enforce it. For example, inserting a string into a column declared as <code>INT</code> will not cause an error. This can lead to inconsistent data if not carefully managed.</p> </li> <li> <p>Foreign Keys Are Not Enforced by Default Unlike other databases, SQLite does NOT enforce foreign key constraints unless explicitly enabled. To ensure referential integrity, you must run: <pre><code>PRAGMA foreign_keys = ON;\n</code></pre></p> </li> </ol>"},{"location":"demos/02_implement_erd/#sql-autograder-warmup","title":"SQL Autograder Warmup","text":"<p>This demo will also be used as warmup exercise to get comfortable with the autograder format requirements that will be utilized for all SQL programming assignments for this course. <code>CP0_Autograder_Warmup</code> is worth 5 bonus points that will count towards the 100 participation points for the class. All queries required for <code>`CP0_Autograder_Warmup</code> will be provided in this resource since the primary objective is to gain familiarity with the <code>.yaml</code> file formatting for Gradescope submissions. These queries also provide the foundation necessary to complete <code>CP1_Create_Database</code> and <code>HW2_Create_Database</code> since the SQL concepts utilized have not been covered in class yet.</p> <p>Note</p> <p>Participation points are intended to encourage hands-on learning by actively engaging with the demonstrations during class. This allows you to follow along and reinforce key concepts in real-time.</p>"},{"location":"demos/02_implement_erd/#sqlite-type-affinities","title":"SQLite Type Affinities","text":"<p>Below is a table of the five type affinities in SQLite and how it applies to some of the data types used in other relational database systems such as MySQL. For this demo, we will explicitly utilize data types that directly align with the type affinity. Read more about data types in SQLite here.</p> Affinity Description Applies When Declared Type Contains <code>TEXT</code> Stores values as text (UTF-8, UTF-16LE, or UTF-16BE). <code>CHAR</code>, <code>CLOB</code>, <code>TEXT</code> <code>NUMERIC</code> Stores values as integers or floats when possible; also used for date/time. <code>NUMERIC</code>, <code>DECIMAL</code>, <code>BOOLEAN</code> or unrecognized types <code>INTEGER</code> Stores values as integers. <code>INT</code> <code>REAL</code> Stores values as 8-byte floating-point numbers. <code>REAL</code>, <code>FLOAT</code>, <code>DOUBLE</code> <code>BLOB</code> No type conversion; values stored exactly as input. Type is exactly <code>BLOB</code> or completely unrecognized <p>Note</p> <p>Data types are not evaluated in the grader for <code>CP0_Autograder_Warmup</code> but will be a requirement in <code>CP1_Create_Database</code> and <code>HW2_Create_Database</code>.</p>"},{"location":"demos/02_implement_erd/#some-thoughts-on-naming-conventions","title":"Some Thoughts on Naming Conventions","text":"<p>If you do any amount of research on the web about best practices for table and column naming conventions, the main thing that you will discover is there does not seem to be any consistent recommendations. Should you use a <code>snake_case</code>, <code>camelCase</code>, or <code>PascalCase</code> naming convention? Should you use singular or plural nouns? The latter seems to be a pretty highly debated topic. Check out this Stack Overflow post where it seems almost every other answer/comment contradicts each other. </p> <p>Here are two general rules to consider:</p> <ol> <li>Be consistent</li> <li>Avoid names that conflict with applicable DBMS reserved words</li> </ol> <p>In line with rule #1 above, we will use <code>snake_case</code> throughout this course and favor singular nouns unless it just sounds weird when you say it out loud or it violates rule #2. Click here to read a little more about naming conventions.</p>"},{"location":"demos/02_implement_erd/#install-db-browser","title":"Install DB Browser","text":"<p>To follow along, you will need to install DB Browser, an app used for working with SQLite database files. Click here to go to the DB Browser downloads page and follow the instructions to download and install the version for your operating system.</p>"},{"location":"demos/02_implement_erd/#create-database","title":"Create Database","text":"<p>In this demo, we will be creating a SQLite version of the small university database that has been referenced in the Introduction and Relational Databases lectures. Open DB Browser and click on the button \"New Database\".</p> <p></p> <p>Select a folder location on your computer and name the new database <code>university</code> and click Save.</p>"},{"location":"demos/02_implement_erd/#implementing-entities-and-attributes","title":"Implementing Entities and Attributes","text":"<p>We will be converting the following conceptual ERD into a logical design for SQLite.</p> <p></p> <p>First, we will write the initial <code>CREATE TABLE</code> statements for the <code>course</code>, <code>class_schedule</code>, and <code>student</code> tables.</p> <p>Important Implementation Requirements</p> <ul> <li>Table names are NOT considered in the autograder but typically should be implemented in lower case with <code>_</code> in between words matching the ERD entity box exactly.</li> <li>Attribute names MUST be converted to all lower case with <code>_</code> in between words.</li> <li>Attributes must accurately represent whether a column allows NULL values, based on business requirements and/or ERD specifications.</li> <li>Composite attribute requirements will be specified but typically are some combination of the child and parent names or vice versa with <code>_</code> in between words.</li> </ul> <p>For this simple database, there are no weak entities since each entity can be uniquely identified by its own key attributes. Therefore, the tables are pretty straight forward with only simple attributes and one key attribute for each table.</p> <p>The <code>course</code> table has 4 attributes with <code>course_num</code> as the primary key.</p> <pre><code>CREATE TABLE course (\n  course_num integer NOT NULL,\n  title text NOT NULL,\n  credits integer NOT NULL,\n  fee numeric NOT NULL,\n  CONSTRAINT course_pk PRIMARY KEY(course_num)\n);\n</code></pre> <p>Warning</p> <p>SQLite can cache updates in memory and some tools stage edits until you commit or write changes. </p> <p>In DB Browser, you use the Write Changes button to commit any pending updates to the database.</p> <p></p> <p>In addition, it will prompt you if you attempt to close the app or database with changes that have not been made to the database yet.</p> <p></p> <p>The <code>class_schedule</code> table has 6 attributes with <code>section_num</code> as the primary key.</p> <p><pre><code>CREATE TABLE class_schedule (\n  section_num integer NOT NULL, \n  course_num integer NOT NULL, \n  course_section text NOT NULL, \n  start_date text NOT NULL, \n  end_date text NOT NULL, \n  instructor text NOT NULL, \n  CONSTRAINT class_schedule_pk PRIMARY KEY(section_num)\n);\n</code></pre> The <code>student</code> table has 4 attributes with <code>student_id</code> as the primary key.</p> <pre><code>CREATE TABLE student (\n  student_id integer NOT NULL, \n  first_name text NOT NULL, \n  last_name text NOT NULL, \n  email text NOT NULL, \n  CONSTRAINT student_pk PRIMARY KEY(student_id)\n);\n</code></pre>"},{"location":"demos/02_implement_erd/#implementing-relationships","title":"Implementing Relationships","text":""},{"location":"demos/02_implement_erd/#1n-or-n1-relationships","title":"1:N or N:1 Relationships","text":"<p>The relationship between <code>course</code> and <code>class_schedule</code> is 1:N because the same course can be offered on the class schedule multiple times. However, for each class section, it can only be offered for one course. We will add a foreign key constraint on the many side of the relationship in the <code>CREATE TABLE class_schedule</code> statement.</p> <p><pre><code>CREATE TABLE class_schedule (\n  section_num integer NOT NULL, \n  course_num integer NOT NULL, \n  course_section text NOT NULL, \n  start_date text NOT NULL, \n  end_date text NOT NULL, \n  instructor text NOT NULL, \n  CONSTRAINT class_schedule_pk PRIMARY KEY(section_num),\n  CONSTRAINT class_schedule_course_fk FOREIGN KEY (course_num) REFERENCES course(course_num)\n);\n</code></pre> You may come across the SQL syntax where foreign keys are added after all tables have been created using the <code>ALTER TABLE</code> and <code>ADD CONSTRAINT</code> statements. One advantage of this approach is that it eliminates the need to create the tables in a specific order (i.e., cannot add a foreign key restraint that references a table that does not exist yet). For example, here is an example for altering the <code>class_schedule</code> table and adding the same foreign key constraint.</p> <pre><code>ALTER TABLE class_schedule ADD CONSTRAINT class_schedule_course_fk FOREIGN KEY(course_num)\nREFERENCES course (course_num);\n</code></pre> <p>Tip</p> <p>SQLite does not support adding foreign key constraints with <code>ALTER TABLE</code> after the table has already been created as you can in other databases like MySQL or PostgreSQL.</p>"},{"location":"demos/02_implement_erd/#recursive-relationships","title":"Recursive Relationships","text":"<p>In addition, the recursive relationship between <code>course</code> is 1:N because a course can only have 1 prerequisite course but that course can be a prerequisite for multiple courses. As noted by the partial participation line on the 1 side of the relationship, all courses do not have a prerequisite so this indicates this column must allow <code>NULL</code> values. The total participation line on the N side confirms the course must exist in order to be a prerequisite.</p> <p>Let's go back and add the additional <code>prereq_course_num</code> column and the self-referencing foreign key.</p> <pre><code>CREATE TABLE course (\n  course_num integer NOT NULL,\n  title text NOT NULL,\n  credits integer NOT NULL,\n  fee numeric NOT NULL,\n  prereq_course_num integer NULL,\n  CONSTRAINT course_pk PRIMARY KEY(course_num),\n  CONSTRAINT prereq_course_fk FOREIGN KEY (prereq_course_num) REFERENCES course(course_num)\n);\n</code></pre> <p>Note</p> <p>In real-world situations, the recursive relationship between course most likely would be M:N since a course could have multiple prerequisites but was limited to 1 to illustrate the concepts on how this type of relationship would be implemented in the same table.</p>"},{"location":"demos/02_implement_erd/#mn-relationships","title":"M:N Relationships","text":"<p>We have one M:N relationship since each class section can have many students enrolled and each student can enroll in multiple classes. We will need a new bridge table that contains two foreign keys, referring to the primary keys of the related tables. For the university ERD, we do not have any attributes connected to the <code>enrolls</code> relationship so the new bridge table will only have columns for the respective primary keys of the related tables.</p> <p>There is no standard convention for bridge table names but <code>class_schedule_student</code> just doesn't sound natural so we will go with the name <code>enrollment</code> here since the purpose of the table is to track all students enrollment in classes.</p> <pre><code>CREATE TABLE enrollment (\n  student_id integer NOT NULL, \n  section_num integer NOT NULL, \n  CONSTRAINT enrollment_pk PRIMARY KEY (student_id, section_num), \n  CONSTRAINT enrollment_student_fk FOREIGN KEY (student_id) REFERENCES student(student_id), \n  CONSTRAINT enrollment_course_fk FOREIGN KEY (section_num) REFERENCES class_schedule(section_num)\n);\n</code></pre>"},{"location":"demos/02_implement_erd/#submission-formatting","title":"Submission Formatting","text":"<p>We are now ready to take each of our SQL statements and paste into the <code>submission.yaml</code> for grading. For SQL query assignments, this will be pretty straight forward where you will simply paste your query in the <code>submission.yaml</code> file for the respective question. However, database creation assignments require some special queries but these will be provided and you will focus on writing the SQL to create all relevant tables for the database with appropriate data types, foreign keys, primary keys, and other constraints.</p>"},{"location":"demos/02_implement_erd/#strong-entity-tables","title":"Strong Entity Tables","text":"<p>First, let's discuss the required SQL that is utilized by the autograder for validating the structure of tables implemented for strong entities. SQLite has a <code>pragma_table_info('table_name')</code> function that returns a result set (similar to a table), which contains information about the columns of a specified table. This result set includes one row for each column in the table and contains the following columns:</p> <ol> <li><code>cid</code>: The column ID (an integer index, starting from 0).</li> <li><code>name</code>: The name of the column.</li> <li><code>type</code>: The data type of the column.</li> <li><code>notnull</code>: An integer indicating whether the column has a NOT NULL constraint (1 for true, 0 for false).</li> <li><code>dflt_value</code>: The default value for the column, or NULL if no default value is specified.</li> <li><code>pk</code>: An integer indicating whether the column is part of the primary key (1 for true, 0 for false).</li> </ol> <p>For this warmup exercise, we will only be using 3 out of 6 columns in the result to validate column names, binary indicator for the primary key(s), and binary indicator if the column allows NULL values. </p> <p>Tip</p> <p>This is why column names, correct primary keys and the NULL/NOT NULL constraint are important!</p> <p>Example usage:</p> <pre><code>SELECT \n  name,\n  pk,\n  \"notnull\"\nFROM pragma_table_info('course')\nORDER BY\n  name;\n</code></pre> <p>Note</p> <p>You may wonder why <code>notnull</code> is enclosed in double quotes (\"\"). In SQL, <code>NOTNULL</code> is a reserved keyword, and without the quotes, the query will result in an error. You can safely enclose every column in double quotes if you would like.</p> <p>Here is the full code for question 1 to create the <code>course</code> table.</p> <pre><code>- question: 1\n  answer: |\n    CREATE TABLE course (\n      course_num integer NOT NULL,\n      title text NOT NULL,\n      credits integer NOT NULL,\n      fee numeric NOT NULL,\n      prereq_course_num integer NULL,\n      CONSTRAINT course_pk PRIMARY KEY(course_num),\n      CONSTRAINT prereq_course_fk FOREIGN KEY (prereq_course_num) REFERENCES course(course_num)\n    );\n\n    SELECT \n      name,\n      pk,\n      \"notnull\"\n    FROM pragma_table_info('course')\n    ORDER BY\n      name;\n</code></pre> <p>Important SQL Formatting Requirement</p> <ul> <li>Each query MUST have a <code>;</code> in between each statement for each question in your <code>submission.yaml</code> file. Pay close attention to the <code>ORDER BY</code> requirements since the row order must match exactly!</li> </ul> <p>Let's now add in the queries for the <code>class_schedule</code> and <code>student</code> tables. You will notice the formatting is similar with the <code>CREATE TABLE</code> statement followed by the <code>pragma_table_info()</code> query.</p> <pre><code>- question: 2\n  answer: |\n    CREATE TABLE class_schedule (\n    section_num integer NOT NULL, \n    course_num integer NOT NULL, \n    course_section text NOT NULL, \n    start_date text NOT NULL, \n    end_date text NOT NULL, \n    instructor text NOT NULL, \n    CONSTRAINT class_schedule_pk PRIMARY KEY(section_num), \n    CONSTRAINT class_schedule_course_fk FOREIGN KEY (course_num) REFERENCES course(course_num)\n    );\n\n    SELECT \n      name,\n      pk,\n      \"notnull\"\n    FROM pragma_table_info('class_schedule')\n    ORDER BY\n      name;  \n\n- question: 3\n  answer: |\n    CREATE TABLE student (\n      student_id integer NOT NULL, \n      first_name text NOT NULL, \n      last_name text NOT NULL, \n      email text NOT NULL, \n      CONSTRAINT student_pk PRIMARY KEY(student_id)\n    );\n\n    SELECT \n      name,\n      pk,\n      \"notnull\"\n    FROM pragma_table_info('student')\n    ORDER BY\n      name;\n</code></pre>"},{"location":"demos/02_implement_erd/#weak-entitybridge-tables","title":"Weak Entity/Bridge Tables","text":"<p>The implementation of weak entities and/or bridge tables to decompose M:N relationships require critical thinking and the structure of the <code>submission.yaml</code> file could provide many clues on the correct logical design. Therefore, all other tables in the database will be graded in a single question with the output based on a custom database view in the Autograder.</p> <p>For the <code>university</code> database, we only have the one bridge table for the <code>student</code> to <code>class_schedule</code> M:N relationship so we will add that <code>CREATE TABLE</code> statement above the query that will validate all tables.</p> <pre><code>- question: 4\n  answer: |\n    CREATE TABLE enrollment (\n      student_id integer NOT NULL, \n      section_num integer NOT NULL, \n      CONSTRAINT enrollment_pk PRIMARY KEY (student_id, section_num), \n      CONSTRAINT enrollment_student_fk FOREIGN KEY (student_id) REFERENCES student(student_id), \n      CONSTRAINT enrollment_course_fk FOREIGN KEY (section_num) REFERENCES class_schedule(section_num)\n    );\n\n    SELECT\n      column_name,\n      is_pk,\n      pk_has_fk,\n      table_cnt,\n      fk_reference_cnt\n    FROM vw_composite_table_summary\n    ORDER BY\n      column_name\n</code></pre>"},{"location":"demos/02_implement_erd/#foreign-keys","title":"Foreign Keys","text":"<p>All foreign keys will be automatically evaluated and you only need to ensure that all tables in the prior questions have the proper foreign key design.</p> <pre><code>- question: 5\n  answer: |\n    SELECT\n      fk_column,\n      ref_column,\n      table_cnt,\n      ref_table_cnt\n    FROM vw_foreign_key_summary\n    ORDER BY\n      fk_column,\n      ref_column;\n</code></pre> <p>Important Formatting Requirements</p> <ul> <li>The <code>SELECT</code> statement that uses the <code>vw_composite_column_summary</code> and <code>vw_foreign_key_column_summary</code> will be provided in all starter <code>submission.yaml</code> files and should <code>NOT</code> be changed.</li> </ul>"},{"location":"demos/02_implement_erd/#autograder-submission","title":"Autograder Submission","text":"<p>We are now ready to submit our <code>submission.yaml</code> file on Gradescope for grading of <code>CP0_Autograder_Warmup</code>.</p>"},{"location":"demos/02_implement_erd/#conclusion","title":"Conclusion","text":"<p>In this demo, we analyzed the university entity-relationship diagram (ERD) and followed all implementation steps to convert our conceptual data model to a logical database design.</p>"},{"location":"demos/03_create_database_erd/","title":"Create a MySQL Database and ERD","text":""},{"location":"demos/03_create_database_erd/#overview","title":"Overview","text":"<p>In this demo, we will modify the small university database from the Implement ERD Demo for MySQL and demonstrate how to reverse engineer a Crow's Foot notation ERD. We will be using MySQL Workbench 8.0. Click here to go to the MySQL Community Downloads page and follow the instructions to download and install for your operating system. You can also check out this Installation Guide with a step-by-step tutorial that is specific to Windows.</p> <p>Finally, we will explore another ERD drawing tool, QuickDBD. QuickDBD lets you create database diagrams by typing in its own simple, proprietary language. Once your ERD is complete, you can use the Export feature to generate the SQL code needed to build your database. Typically you would want to always pick an app that also offers export functionality to automatically generate your <code>CREATE TABLE</code> statements.</p> <p>If you prefer the look of QuickDBD diagrams, you can also Import an existing database to automatically convert it into a QuickDBD diagram. The Import feature is limited to MySQL/MariaDB, Oracle, and SQL Server. Click here to watch a video on an Overview of QuickDBD.</p>"},{"location":"demos/03_create_database_erd/#introduction-to-mysql","title":"Introduction to MySQL","text":"<p>MySQL is an open-source relational database management system (RDBMS) developed by a Swedish company, MySQL AB, founded in 1995. Designed to be fast, reliable, and easy to use, MySQL quickly gained popularity as a database for web applications, especially those using the LAMP stack (Linux, Apache, MySQL, PHP/Python/Perl). In 2008, MySQL AB was acquired by Sun Microsystems, which was itself acquired by Oracle Corporation in 2010. Despite concerns about its future under Oracle\u2019s ownership, MySQL has remained a widely used RDBMS, especially for open-source projects and small to medium-sized applications. It supports standard SQL features such as transactions, joins, and stored procedures, and has evolved to include support for advanced features like replication, clustering, and JSON data types.</p> <p>In this demo, we will update the <code>university</code> tables to use more memory-efficient data types for the text columns based on the following requirements:</p> <ul> <li>Course titles should allow up to 50 characters.</li> <li>Course credits should only allow from 1 to 3.</li> <li>Course sections should store exactly 2 characters.</li> <li>Instructor should allow up to 50 characters.</li> <li>Student first and last names should allow up to 25 characters each.</li> <li>Student email addresses should allow up to 50 characters.</li> </ul>"},{"location":"demos/03_create_database_erd/#option-1-create-database-and-reverse-engineer-erd","title":"Option 1 - Create Database and Reverse Engineer ERD","text":""},{"location":"demos/03_create_database_erd/#create-a-new-database","title":"Create a new Database","text":"<p>Open MySQL Workbench and on the Home screen, click the Local Instance MySQL connection (you may be prompted for your root password). Once connected, complete the following steps:</p> <ol> <li>Go to the Navigator panel on the left and click the Schemas tab. </li> <li>Right/secondary click in the Schemas area and select Create Schema.</li> <li>Enter <code>university</code> for your schema, then click Apply.</li> <li>Review the generated SQL statement and click Apply again to finalize.</li> <li>Click Finish to complete schema creation.</li> </ol>"},{"location":"demos/03_create_database_erd/#create-the-course-table","title":"Create the <code>course</code> table","text":"<p>Click on the +SQL icon to create a new SQL tab for executing queries. The first step is we need to tell the SQL file that we want to use the <code>university</code> schema. Add the following code to the top of your file:</p> <pre><code>USE university;\n</code></pre> <p>Now, click on the Lightning bolt icon to \"Execute the selected portion or everything\" button.</p> <p></p> <p>The <code>course</code> table will be modified to change the <code>title</code> column to use the <code>varchar(50)</code> data type. Additionally, a <code>CHECK</code> constraint will be added to ensure that the <code>credits</code> value is between 1 and 3. Copy the SQL code below and paste into the new query file.</p> <p><pre><code>CREATE TABLE course (\n  course_num int NOT NULL,\n  title varchar(50) NOT NULL,\n  credits int NOT NULL CHECK (credits &gt;= 1 and credits &lt;= 3),\n  fee decimal(10,2) NOT NULL,\n  prereq_course_num int NULL,\n  CONSTRAINT course_pk PRIMARY KEY(course_num),\n  CONSTRAINT prereq_course_fk FOREIGN KEY (prereq_course_num) REFERENCES course(course_num)\n);\n</code></pre> Click on the execute button to run the code and create the new table.</p> <p>What happens if you try to execute the code again?</p> <p>Warning</p> <p>You will get an Execution error because the table already exists. We will discuss ways to avoid this later in this demo.</p>"},{"location":"demos/03_create_database_erd/#create-the-class_schedule-table","title":"Create the <code>class_schedule</code> table","text":"<p>The <code>class_schedule</code> table will be modified so that the <code>course_section</code> column stores exactly two characters, and the <code>instructor</code> column uses the <code>varchar(50)</code> data type. Copy/write the SQL code below and paste below the <code>CREATE TABLE course</code> code in the same query file.</p> <p><pre><code>CREATE TABLE class_schedule (\n  section_num int NOT NULL, \n  course_num int NOT NULL, \n  course_section char(2) NOT NULL, \n  start_date date NOT NULL, \n  end_date date NOT NULL, \n  instructor varchar(50) NOT NULL, \n  CONSTRAINT class_schedule_pk PRIMARY KEY(section_num), \n  CONSTRAINT class_schedule_course_fk FOREIGN KEY (course_num) REFERENCES course(course_num)\n);\n</code></pre> Select only the code to create the <code>class_schedule</code> table and execute the code to create the new table.</p> <p>Tip</p> <p>When you insert a 1-character string into a <code>CHAR(2)</code> column, the database automatically pads the value with a space character to reach the defined length.</p>"},{"location":"demos/03_create_database_erd/#create-the-student-table","title":"Create the <code>student</code> table","text":"<p>The <code>student</code> table will be modified to set both the <code>first_name</code> and <code>last_name</code> columns to use the <code>varchar(25)</code> data type, and the <code>email_address</code> column to use <code>varchar(50)</code>. Copy/write the SQL code below and paste below the <code>CREATE TABLE class_schedule</code> code in the same query file.</p> <p><pre><code>CREATE TABLE student (\n  student_id int NOT NULL, \n  first_name varchar(25) NOT NULL, \n  last_name varchar(25) NOT NULL, \n  email_address varchar(50) NOT NULL, \n  CONSTRAINT student_pk PRIMARY KEY(student_id)\n);\n</code></pre> Select only the code to create the <code>student</code> table and execute the code to create the new table.</p>"},{"location":"demos/03_create_database_erd/#create-the-enrollment-table","title":"Create the <code>enrollment</code> table","text":"<p>The <code>enrollment</code> table will remain unchanged, as it is the bridge table and only contains <code>int</code> columns with <code>FOREIGN KEY</code> constraints referencing  the <code>student</code> and <code>class_schedule</code> tables. Copy/write the SQL code below and paste below the <code>CREATE TABLE student</code> code in the same query file.</p> <p><pre><code>CREATE TABLE enrollment (\n  student_id int NOT NULL, \n  section_num int NOT NULL, \n  CONSTRAINT enrollment_pk PRIMARY KEY (student_id, section_num), \n  CONSTRAINT enrollment_student_fk FOREIGN KEY (student_id) REFERENCES student(student_id), \n  CONSTRAINT enrollment_course_fk FOREIGN KEY (section_num) REFERENCES class_schedule(section_num)\n);\n</code></pre> Select only the code to create the <code>enrollment</code> table and execute the code to create the new table. We saw earlier that we cannot create a table if it already exists so we cannot run the entire query without getting an execution error. Let's address that now by adding some <code>DROP TABLE</code> statements.</p>"},{"location":"demos/03_create_database_erd/#add-drop-table-statements","title":"Add Drop Table Statements","text":"<p>One option is to include a <code>DROP TABLE IF EXISTS</code> statement right above each CREATE TABLE statement.</p> <p>Warning</p> <p>You will get an Execution error because you cannot drop the <code>course</code> table since the <code>class_schedule</code> table references it in the <code>FOREIGN KEY</code> constraint.</p> <p>The way to solve for this is to include <code>DROP TABLE IF EXISTS</code> statements at the top but order them in a way that it drops tables with <code>FOREIGN KEY</code> constraints first. Copy/write the SQL code below and paste at the top of the script.</p> <p><pre><code>DROP TABLE IF EXISTS enrollment;\nDROP TABLE IF EXISTS class_schedule;\nDROP TABLE IF EXISTS course;\nDROP TABLE IF EXISTS student;\n</code></pre> These statements will drop all of the tables if they already exist.</p> <p>Tip</p> <p>The <code>CASCADE</code> parameter in the <code>DROP TABLE</code> statement will automatically drop objects that depend on the table but this is another example of SQL functionality that only exists in some relational database systems. MySQL and SQLite do not support this parameter.</p>"},{"location":"demos/03_create_database_erd/#create-erd","title":"Create ERD","text":"<p>Now that the database has been created with all tables and constraints, we can reverse engineer an ERD from the existing schema. From the top menu in MySQL Workbench, select Database \u2192 Reverse Engineer.... The first time you load the Reverse Engineer Database wizard, you will need to select your Local instance connection from the Stored Connection drop-down menu. Then, click Next twice to reach the page where you select the schema. Check the box for the <code>university</code> schema, then click Next two more times. Ensure that all objects are selected, and click Execute to run the reverse engineering process. Once it completes, click Next, then Finish. A new tab will open displaying the EER Diagram (ERD) for your database.</p> <p>Note</p> <p>After the ERD Diagram is generated, MySQL Workbench may place the tables in random or overlapping positions. You will need to manually arrange the tables and relationships on the canvas to make the diagram easier to read and understand. Use the selection and move tools to organize the layout logically by grouping related entities together.</p> <p>Here is our initial ERD in MySQL Workbench with only the table objects rearranged.</p> <p></p> <p>In MySQL Workbench, the optionality of a relationship line is determined by the database schema and whether the <code>REFERENCES</code> column allows <code>NULL</code> values. However, when building an ERD, we want to represent the business rules, not just the schema, since this helps analysts understand the data model and write better queries. Fortunately, MySQL Workbench lets you adjust optionality by editing the relationship and unchecking the Mandatory option on either side of a <code>FOREIGN KEY</code>.</p> <p>Note</p> <p>Recall the inside symbol represents the minimum number of times an entity can be related to the other entity.</p> <p>For our ERD, we will revise the relationships as follows:</p> <ol> <li>course-course: Not every course has a prerequisite and not all courses are prerequisites, so Mandatory should be unchecked on the Referencing and Referenced Table side of the relationship.</li> <li>course-class_schedule: Not every course is offered on the schedule, so Mandatory should only be unchecked on the Referencing side of the relationship.</li> <li>class_schedule/student\u2013enrollment: A class section would not have any enrolled students at the time it is added to the schedule and not every student enrolls in a class. Mandatory should be unchecked on Referencing side of both relationships with enrollment.</li> </ol> <p>Note</p> <p>Identifying relationships in MySQL Workbench are notated with a solid dashed line. Since the bridge <code>enrollment</code> table cannot exist without both parent rows, it is an identifying relationship.</p> <p>We now have our final ERD in MySQL Workbench.</p> <p></p>"},{"location":"demos/03_create_database_erd/#option-2-create-an-erd-with-export-sql-option","title":"Option 2 - Create an ERD with Export SQL Option","text":""},{"location":"demos/03_create_database_erd/#create-new-diagram","title":"Create new diagram","text":"<p>Go to QuickDBD. Click on File \u2192 Load Sample Diagram to load the sample to get a general idea of the QuickDBD syntax. You can also copy and paste the code to a text file or notebook for easy reference later.</p> <p>Tip</p> <p>Creating an account with QuickDBD will allow you to save your diagram as well as share and collaborate with others. A Pro Account is required to save more than one diagram but you can always save the diagram code to your computer and paste into a blank diagram as needed.</p>"},{"location":"demos/03_create_database_erd/#relationship-symbols","title":"Relationship Symbols","text":"<p>In QuickDBD, below are all of the symbols for the allowed relationships. You can learn about the allowed relationship types under Docs \u2192 Relationships.</p> <pre><code>-     - one TO one  \n-&lt;    - one TO many  \n&gt;-    - many TO one  \n&gt;-&lt;   - many TO many  \n-0    - one TO zero or one  \n0-    - zero or one TO one  \n0-0   - zero or one TO zero or one  \n-0&lt;   - one TO zero or many  \n&gt;0-   - zero or many TO one  \n</code></pre> <p>Note</p> <p>QuickDBD only has one option <code>0-0</code> that allows for zero optionality on both sides. If you use QuickDBD for your ERD, you will have to use the most appropriate available option.</p>"},{"location":"demos/03_create_database_erd/#create-the-course-entity","title":"Create the <code>course</code> entity","text":"<p>Copy/write the code below and paste into the blank file.</p> <p><pre><code>course\n-\ncourse_num PK int\ntitle varchar(50)\ncredits int\nfee decimal(10,2)\nprereq_course_num int NULL FK -0&lt; course.course_num\n</code></pre> We now have a <code>course</code> entity on the diagram.</p> <p></p> <p>Warning</p> <p>QuickDBD considers all table fields as <code>NOT NULL</code> by default and explicitly defining it as such will result in a parser error.</p> <p>The self-referencing relationship for <code>course</code> is an example where QuickDBD does not have the correct relationship option for zero or one to zero or many. We will use <code>-0&lt;</code> since it best reflects the relationship that a course can only have one prerequisite in the current database design.</p> <p>Note</p> <p>For the one TO zero or many or zero or many TO one options, make sure to choose the relationship that has the many cardinality on the correct side of the relationship.</p>"},{"location":"demos/03_create_database_erd/#create-the-class_schedule-entity","title":"Create the <code>class_schedule</code> entity","text":"<p>The relationship between <code>course</code> and <code>class_schedule</code> is 1:N. A course must exist to be on the schedule but not all courses will be offered on the the schedule. Therefore, we will use zero or many TO one. Copy/write the code below and paste below the <code>course</code> code in the same blank file.</p> <pre><code>class_schedule\n-\nsection_num PK int\ncourse_num int FK &gt;0- course.course_num\ncourse_section char(2)\nstart_date date\nend_date date\ninstructor varchar(50)\n</code></pre> <p>We now have a <code>class_schedule</code> entity on the diagram.</p> <p></p> <p>Note</p> <p>You will need to rearrange the entities as desired as they get added to the diagram.</p>"},{"location":"demos/03_create_database_erd/#create-the-student-entity","title":"Create the <code>student</code> entity","text":"<p>Copy/write the code below and paste below the <code>class_schedule</code> code in the same blank file.</p> <p><pre><code>student\n-\nstudent_id PK int\nfirst_name varchar(25)\nlast_name varchar(25)\nemail_address varchar(50)\n</code></pre> We now have a <code>student</code> entity on the diagram.</p> <p></p>"},{"location":"demos/03_create_database_erd/#create-the-enrollment-entity","title":"Create the <code>enrollment</code> entity","text":"<p>The relationship between <code>class_schedule</code> and <code>enrollment</code> as well as <code>student</code> and <code>enrollment</code> are 1:N. A class section can be created without having any students enrolled and a student can exist without enrolling in any classes. Therefore, we will use zero or many TO one. Copy/write the code below and paste below the <code>student</code> code in the same blank file.</p> <p><pre><code>enrollment\n-\nstudent_id PK int FK &gt;0- student.student_id\nsection_num PK int FK &gt;0- class_schedule.section_num\n</code></pre> We now have a <code>enrollment</code> entity on the diagram.</p> <p></p>"},{"location":"demos/03_create_database_erd/#export-to-sql-file","title":"Export to SQL file","text":"<p>We are now ready to export the diagram to a SQL file with the <code>CREATE TABLE</code> statements. Click on EXPORT and choose MySQL/MariaDB.</p> <p>Note</p> <p>QuickDBD does not include <code>DROP TABLE IF EXISTS</code> statements and also uses the <code>ALTER TABLE</code> statement to add the <code>FOREIGN KEY</code> constraints after creating the tables. In addition, QuickDBD does not have syntax to add any <code>CHECK</code> constraints so make sure to add those to any relevant columns after downloading the SQL file.</p>"},{"location":"demos/03_create_database_erd/#conclusion","title":"Conclusion","text":"<p>In this demo, we reviewed how to create a database and ERD by writing CREATE TABLE SQL statements manually and then reverse engineering the ERD in MySQL Workbench as well as used an ERD diagramming tool with export to SQL functionality to generate the necessary SQL statements.</p>"},{"location":"demos/04_crud_operations/","title":"CRUD Operations","text":""},{"location":"demos/04_crud_operations/#overview","title":"Overview","text":"<p>In HW4, you will be working with an interesting movie dataset made available by GroupLens which has been collected from the MovieLens website. In this demo though, we will work with a smaller movie dataset from IMDb.com to perform some simple query operations, as well as add, modify, and remove data from the database. Click here to download the database file.</p> <p>Tip</p> <p>We will be executing DML statements to modify data in the database. Recommend you keep one copy of the original database in a different location on your computer so you can recover if needed. Alternatively, you can use the Revert Changes button in DB Browser to undo any unintended modifications.</p>"},{"location":"demos/04_crud_operations/#getting-started","title":"Getting Started","text":"<p>Open the file with DB Browser and click on \"Browse Data\" to explore the data:</p> <p></p> <p>You should see the following five tables:</p> Table Description Rows <code>title</code> Movies, Shorts, TV series, Video games, etc. 482,705 <code>rating</code> IMDb ratings (voted by users) for some titles 105,185 <code>aka</code> \"also known as\" \u2013 in other regions/languages 777,155 <code>castcrew</code> People/characters that are in which titles 2,770,776 <code>person</code> Actors, Composers, Producers, Writers, etc. 1,382,189 <p>Another way to check the number of rows in a table is by using the <code>COUNT()</code> function combined with the <code>*</code> special symbol.</p> <pre><code>SELECT COUNT(*) from title\n</code></pre> <p>This returns the number of rows in the <code>title</code> table. We will learn about aggregation functions in the Intermediate SQL lecture but sharing this here since we will use it to validate the counts in every table in the database after you have performed some DDL operations. Don't worry though, that query will be provided in the <code>submission.yaml</code> file.</p>"},{"location":"demos/04_crud_operations/#how-is-the-data-organized","title":"How is the data organized?","text":"<p>Below is the ERD for the IMDb database created on QuickDBD.</p> <p></p> <p>Acknowledgment</p> <p>The original version of this data came from IMDb Non-Commercial Datasets.</p>"},{"location":"demos/04_crud_operations/#lets-write-some-sql","title":"Let's Write Some SQL","text":"<p>Click on the \"Execute SQL\" tab in DB Browser.</p> <p></p>"},{"location":"demos/04_crud_operations/#find-a-person","title":"Find a person","text":"<p>Tom Cruise recently brought some movie magic to the 2024 Paris Olympics closing ceremony. Let's search for Tom in the <code>person</code> table.</p> <p><pre><code>SELECT *\nFROM person\nWHERE name = 'Tom Cruise'\n</code></pre> Here is the output:</p> <p></p> <p>He still pulls off all of those stunts at age 62!</p> <p>Note</p> <p>As we learned in the SQL Basics lecture, there are different SQL formatting styles. In this demo, we will focus on concepts and less about style such as indentation.</p>"},{"location":"demos/04_crud_operations/#find-all-movies-for-a-person","title":"Find all movies for a person","text":"<p>We now know that Tom's <code>pid</code> in the database is <code>129</code> so let's search the <code>castcrew</code> table to see how many movies Tom has in the database.</p> <p><pre><code>SELECT *\nFROM castcrew\nWHERE pid = 129\n</code></pre> Here is the output:</p> <p></p> <p>OK, Tom has appeared in 54 titles in the database. Let's narrow that down to just movies that he was an actor in the cast.</p> <p><pre><code>SELECT *\nFROM castcrew\nWHERE pid = 129\nand category = 'actor'\n</code></pre> Here is the output:</p> <p></p>"},{"location":"demos/04_crud_operations/#find-a-movie","title":"Find a movie","text":"<p>Let's check out movie <code>tid</code> \"9603212\" in the <code>title</code> table.</p> <p><pre><code>SELECT *\nFROM title\nWHERE tid = 9603212\n</code></pre> Here is the output:</p> <p></p> <p>Wait, if you go to the Mission: Impossible - Dead Reckoning Part One page, Mission Impossible 7 came out in 2023? </p> <p></p> <p>Note</p> <p>We have not covered SQL JOINS yet so in this demo every query will be a simple SQL statement with only one table.</p>"},{"location":"demos/04_crud_operations/#question-1","title":"Question 1","text":""},{"location":"demos/04_crud_operations/#update-a-movie","title":"Update a movie","text":"<p>Let's update the database and set the year to 2023 and the runtime to 163 for 2h 43m.</p> <p><pre><code>UPDATE title\nSET year = 2023, runtime = 163\nWHERE tid = 9603212\n</code></pre> Here is the execution summary:</p> <pre><code>Execution finished without errors.\nResult: query executed successfully. Took 0ms, 1 rows affected\nAt line 23:\nUPDATE title\nSET year = 2023, runtime = 163\nWHERE tid = 9603212\n</code></pre> <p>Note</p> <p>DDL operations will not have any tabular output like DQL operations but you can confirm if the operation ran successfully and how many rows were affected in the section below the grid output.</p> <p>Copy and paste the code for the <code>UPDATE</code> statement above the provided <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 1.</p>"},{"location":"demos/04_crud_operations/#question-2","title":"Question 2","text":""},{"location":"demos/04_crud_operations/#insert-a-rating","title":"Insert a rating","text":"<p>Since Mission Impossible 7 had not come out yet when it was added to the database, let's also add the average rating and votes.</p> <p><pre><code>INSERT INTO rating (tid, average, votes)\nVALUES (9603212, 7.6, 311000)\n</code></pre> Here is the execution summary:</p> <pre><code>Execution finished without errors.\nResult: query executed successfully. Took 3ms, 1 rows affected\nAt line 28:\nINSERT INTO rating (tid, average, votes)\nVALUES (9603212, 7.6, 311000)\n</code></pre> <p>Copy and paste the code for the <code>INSERT INTO</code> statement above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 2.</p>"},{"location":"demos/04_crud_operations/#question-3","title":"Question 3","text":""},{"location":"demos/04_crud_operations/#find-movies-using-a-logical-operator","title":"Find movies using a logical operator","text":"<p>Let's search for all movies that start with <code>Mission: Impossible</code>.</p> <p><pre><code>SELECT *\nFROM title\nWHERE title like 'Mission: Impossible%'\n</code></pre> Notice the wildcard character <code>%</code> usage at the end of the line but not the beginning? This makes sure the query only returns movies that start with Mission: Impossible.</p> <p>Here is the output:</p> <p></p> <p>Tip</p> <p>You can combine the <code>NOT</code> operator with the <code>LIKE</code> operator to find all movies that do NOT start with Mission: Impossible.</p> <p>OK, so all of the Mission Impossible movies reflect the release title but it looks like our database was created when Mission Impossible 7 and 8 had only been announced but no official titles yet. Let's also update the title from \"Mission: Impossible 7\" to \"Mission: Impossible - Dead Reckoning Part One\". I'm not aware of title change other than the \"7\" placeholder so we will go ahead and update the <code>original</code> title as well.</p> <p><pre><code>UPDATE title\nSET title = 'Mission: Impossible - Dead Reckoning Part One',\noriginal = 'Mission: Impossible - Dead Reckoning Part One'\nWHERE tid = 9603212\n</code></pre> Here is the execution summary:</p> <p><pre><code>Execution finished without errors.\nResult: query executed successfully. Took 0ms, 1 rows affected\nAt line 42:\nUPDATE title\nSET title = 'Mission: Impossible - Dead Reckoning Part One',\noriginal = 'Mission: Impossible - Dead Reckoning Part One'\nWHERE tid = 9603212\n</code></pre> Copy and paste the code for the <code>UPDATE</code> statement above the the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 3.</p>"},{"location":"demos/04_crud_operations/#question-4","title":"Question 4","text":""},{"location":"demos/04_crud_operations/#deleteupdate-a-movie","title":"Delete/Update a movie","text":"<p>Mission: Impossible 8 came out in 2025 but I bet they wish they stuck to the original plan and just had them be the same two-part movie. Let's delete that movie from the <code>title</code> table.</p> <p><pre><code>DELETE FROM title WHERE tid = 9603208\n</code></pre> Here is the execution summary:</p> <pre><code>Execution finished with errors.\nResult: FOREIGN KEY constraint failed\nAt line 48:\nDELETE FROM title WHERE tid = 9603208\n</code></pre> <p>Recall from the ERD, the <code>title</code> table has mandatory one-to-many participation with the <code>aka</code> and <code>castcrew</code> tables and one-to-one with the <code>rating</code> table? We cannot delete the movie from <code>title</code> due to the <code>FOREIGN KEY</code> constraints referencing the <code>title</code> table.</p> What would we need to do to be able to delete the movie from the database? <p>We would have to first delete the <code>tid</code> from <code>aka</code>, <code>rating</code>, and <code>castcrew</code> then from <code>title</code>.</p> <p>Another way to validate if your SQLite database has the Foreign Keys pragma turned on is to go to the Edit Pragmas menu and check if the Foreign Keys box is checked.</p> <p></p> <p>For this demo, we will just update the <code>title</code> table for the final conclusion of Mission Impossible and then select only the Mission Impossible movies with Reckoning anywhere in the title and order by <code>year</code> in <code>ASC</code> order.</p> <pre><code>UPDATE title\nSET title = 'Mission: Impossible - The Final Reckoning',\noriginal = 'Mission: Impossible - The Final Reckoning',\nyear = 2025,\nruntime = 169\nWHERE tid = 9603208;\n\nSELECT *\nFROM title\nWHERE title like 'Mission: Impossible%'\nAND title like '%Reckoning%'\nORDER BY year\n</code></pre> <p>Here is the output:</p> <p></p> <p>Copy and paste the code for the <code>UPDATE</code> and <code>SELECT</code> statement to confirm all updates for the Mission Impossible Reckoning movies into the <code>submission.yaml</code> file for Question 4.</p> <p>Let's wrap up this demo to show how you will frequently use the <code>ORDER BY</code> and <code>LIMIT</code> clauses for homework questions as well as a variety of common operators.</p>"},{"location":"demos/04_crud_operations/#question-5","title":"Question 5","text":""},{"location":"demos/04_crud_operations/#identify-movie-with-top-votes","title":"Identify movie with top votes","text":"<p>Many questions in class participation and homework assignments will ask that you order the output either in ascending or descending order then limit the results. Let's practice that now and order all rows in the <code>rating</code> table by <code>votes</code> in <code>DESC</code> order and then combine with <code>LIMIT</code> clause to return the top movie.</p> <p><pre><code>SELECT *\nFROM rating\nORDER BY votes DESC\nLIMIT 1\n</code></pre> Here is the output:</p> <p></p> <p>Copy and paste the code for the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 5.</p>"},{"location":"demos/04_crud_operations/#lets-practice-common-operators","title":"Let's Practice Common Operators","text":"<p>That concludes the part of the demo where the SQL will be provided for the class participation assignment. Next, we will work through some practice exercises that will require usage of the different operators discussed in the lecture.</p>"},{"location":"demos/04_crud_operations/#multiple-logical-and-comparison-operators","title":"Multiple logical and comparison operators","text":"<p>Find all <code>tvSeries</code> titles that are either a <code>Comedy</code> genre with a <code>runtime</code> less than or equal to 30 minutes OR a <code>Thriller</code> genre with a <code>runtime</code> greater than 30 minutes that ended in <code>2019</code>. Order by the series run in years in descending order and show the top 5.</p> <pre><code>SELECT\n  *,\n  ended-year as series_run\nFROM title\nWHERE \n  type = 'tvSeries'\n  AND ((genres LIKE '%Comedy%' AND runtime &lt;= 30)\n      OR (genres LIKE '%Thriller%' AND runtime &gt; 30))\n  AND ended = 2019\nORDER BY\n  series_run DESC\nLIMIT 5;\n</code></pre> <p>We have a variety of things going on with this query. Because each side of the <code>OR</code> has its own set of <code>AND</code> conditions, we need to group those <code>AND</code> conditions inside parentheses as well as wrap both in parentheses for the <code>OR</code> operator. This ensures that SQL evaluates each side of the <code>OR</code> independently, instead of mixing the logic together. We are also using a comparison operator for the runtime and a math operator to calculate the series run.</p> <p>Here is the output:</p> <p></p> Does the order of the WHERE clause conditions matter? <p>If written correctly, No. However, if you leave out the outer parentheses for the OR conditions and change the order of the <code>type</code> and <code>ended</code> conditions, you can get unintended results.</p>"},{"location":"demos/04_crud_operations/#math-operators","title":"Math operators","text":"<p>Find the oldest actors/actresses that died in 2020. Order by their age at the time of their death in descending order and show the top 5.</p> <pre><code>SELECT\n  *,\n  death - birth AS age\nFROM person p \nWHERE \n  death = 2020\n  AND (profession like '%actor%'\n  OR profession like '%actress%')\nORDER BY\n  age DESC\nLIMIT 5;\n</code></pre> <p>Here is the output:</p> <p></p>"},{"location":"demos/04_crud_operations/#your-turn","title":"Your Turn!","text":"<p>Based on what we have learned so far, it is now your turn to practice and work on several questions on your own or in a small group in class.</p>"},{"location":"demos/04_crud_operations/#question-6","title":"Question 6","text":"<p>Identify the movie title that is scheduled for the latest future release. Select only the <code>tid</code>, <code>title</code>, and <code>year</code> in that order.</p> <p>Copy and paste your code into the <code>submission.yaml</code> for Question 6.</p>"},{"location":"demos/04_crud_operations/#question-7","title":"Question 7","text":"<p>Delete the <code>tid</code> identified in Question 6 from the entire database including any <code>person</code> that does NOT appear in the <code>castcrew</code> for any other movie.</p> <p>Hint</p> <p>You do NOT have to write a complex query to identify the ONE person that should be deleted although you are welcome to ask for AI assistance. You can identify the <code>pid</code> by writing a series of <code>SELECT</code> statements for all persons that are scheduled to be in the <code>castcrew</code> for the movie.</p> <p>Copy and paste ALL of your code into the <code>submission.yaml</code> for Question 7 above the count validation query shown below that is included in the <code>submission.yaml</code> file.</p> <pre><code>SELECT \n(SELECT COUNT(*) from title) as title_cnt,\n(SELECT COUNT(*) from rating) as rating_cnt,\n(SELECT COUNT(*) from aka) as aka_cnt,\n(SELECT COUNT(*) from castcrew) as castcrew_cnt,\n(SELECT COUNT(*) from person) as person_cnt\n</code></pre>"},{"location":"demos/04_crud_operations/#question-8","title":"Question 8","text":"<p>Identify the top 5 oldest persons that were still alive as of 2020 that were born in the 20th century whose profession was either a director or assistant director but never acted (actor or actress) in any movie. Select only the <code>pid</code>, <code>name</code>, <code>birth</code>, <code>death</code>, <code>profession</code> and derived <code>age</code> in that order. Order by their <code>age</code> in descending order.</p> <p>Hint</p> <p>You should only consider information in this database and not whether the person is no longer alive now. The database was last updated in 2020.</p>"},{"location":"demos/04_crud_operations/#question-9","title":"Question 9","text":"<p>Identify ALL moves that have <code>votes</code> greater than 100,000 and an <code>average</code> rating greater than 9.0 OR <code>votes</code> greater than 500,000 and an <code>average</code> rating greater than 8.5. Select only the <code>tid</code>, <code>average</code>, and <code>votes</code>. Order by their <code>average</code> in descending order.</p> <p>Copy and paste your code into the <code>submission.yaml</code> for Question 9.</p>"},{"location":"demos/04_crud_operations/#question-10","title":"Question 10","text":"<p>Identify the top 10 persons with the longest history in the IMDb database that were between 80 and 90 years old as of 2020 (dead or alive) whose profession was actor or actress but they never provided soundtrack services for a movie. Select only the <code>pid</code>, <code>name</code>, <code>birth</code>, <code>death</code>, <code>profession</code> and derived <code>age</code> in that order.</p> <p>Hint</p> <p>The <code>pid</code> is an artificial key that is assigned in ascending order when the person is first added to IMDb.</p>"},{"location":"demos/04_crud_operations/#conclusion","title":"Conclusion","text":"<p>In this demo, we used DB Browser for SQLite to write some basic SQL queries and explored a movie dataset from IMDb.com.</p>"},{"location":"demos/05_aggregating_data_joins/","title":"05 aggregating data joins","text":"Aggregating Data and JOINs Demo Overview <p>In this demo, we will be using a small sample <code>employee</code> database courtesy of https://www.sqltutorial.org/ to get some hands-on practice with the concepts we learned in the <code>Intermediate_SQL</code> Part 1 lecture. The database has been modified slightly to be consistent with the naming conventions we have been using so far in this course. You can find the SQL Sample Database here with downloads for a variety of database systems.</p> <p>If you are interested in working with a larger employee database, check out this resource here. There are MySQL, PostgreSQL, and SQLite versions of varying sizes.</p> <p>Download the resource files for this demo here.</p> <p></p> In\u00a0[1]: Copied! <pre>import sqlite3\n\n%load_ext sql\n\n%sql sqlite:///employee_small.db\n</pre> import sqlite3  %load_ext sql  %sql sqlite:///employee_small.db Connecting to 'sqlite:///employee_small.db' <p>IMPORTANT: Every query that you write in a Jupyter Notebook cell must have the %%sql command directly above the <code>SELECT</code> statement.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_cnt 40 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 1.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: salary_min salary_max salary_avg 2500.0 24000.0 8060.0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 2.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_id dept_min_salary dept_max_salary dept_avg_salary employee_cnt 9 17000.0 24000.0 19333.33 3 11 8300.0 12000.0 10150.0 2 7 10000.0 10000.0 10000.0 1 8 6200.0 14000.0 9616.67 6 2 6000.0 13000.0 9500.0 2 10 6900.0 12000.0 8600.0 6 4 6500.0 6500.0 6500.0 1 5 2700.0 8200.0 5885.71 7 6 4200.0 9000.0 5760.0 5 1 4400.0 4400.0 4400.0 1 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 3.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name salary job_title 107 Diana Lorentz 4200.0 Programmer <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 4.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_name dept_min_salary dept_max_salary dept_avg_salary employee_cnt Executive 17000.0 24000.0 19333.33 3 Accounting 8300.0 12000.0 10150.0 2 Public Relations 10000.0 10000.0 10000.0 1 Sales 6200.0 14000.0 9616.67 6 Marketing 6000.0 13000.0 9500.0 2 Finance 6900.0 12000.0 8600.0 6 Human Resources 6500.0 6500.0 6500.0 1 Shipping 2700.0 8200.0 5885.71 7 IT 4200.0 9000.0 5760.0 5 Administration 4400.0 4400.0 4400.0 1 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 5.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_name dept_min_salary dept_max_salary dept_avg_salary employee_cnt Sales 6200.0 14000.0 9616.67 6 Finance 6900.0 12000.0 8600.0 6 Shipping 2700.0 8200.0 5885.71 7 IT 4200.0 9000.0 5760.0 5 Purchasing 2500.0 11000.0 4150.0 6 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 6.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name department_name 120 Matthew Weiss Shipping 121 Adam Fripp Shipping 122 Payam Kaufling Shipping 123 Shanta Vollman Shipping 126 Irene Mikkilineni Shipping 177 Jack Livingston Sales 178 Kimberely Grant Sales 179 Charles Johnson Sales 192 Sarah Bell Shipping 193 Britney Everett Shipping Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 7.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name department_name dependent_cnt 100 Steven King Executive 1 101 Neena Kochhar Executive 1 102 Lex De Haan Executive 1 145 John Russell Sales 1 146 Karen Partners Sales 1 176 Jonathon Taylor Sales 1 177 Jack Livingston Sales 0 178 Kimberely Grant Sales 0 179 Charles Johnson Sales 0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 8.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name salary job_title job_max_salary 119 Karen Colmenares 2500.0 Purchasing Clerk 5500.0 118 Guy Himuro 2600.0 Purchasing Clerk 5500.0 107 Diana Lorentz 4200.0 Programmer 10000.0 105 David Austin 4800.0 Programmer 10000.0 106 Valli Pataballa 4800.0 Programmer 10000.0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 9.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name salary department_name manager_first_name manager_last_name manager_department_name 100 Steven King 24000.0 Executive None None None 145 John Russell 14000.0 Sales Steven King Executive 146 Karen Partners 13500.0 Sales Steven King Executive 201 Michael Hartstein 13000.0 Marketing Steven King Executive 108 Nancy Greenberg 12000.0 Finance Neena Kochhar Executive 205 Shelley Higgins 12000.0 Accounting Neena Kochhar Executive 114 Den Raphaely 11000.0 Purchasing Steven King Executive 204 Hermann Baer 10000.0 Public Relations Neena Kochhar Executive 103 Alexander Hunold 9000.0 IT Lex De Haan Executive 176 Jonathon Taylor 8600.0 Sales Steven King Executive Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 10.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"demos/05_aggregating_data_joins/#how-is-the-data-organized","title":"How is the data organized\u00b6","text":"<p>Below is the ERD for employee_small databases.</p>"},{"location":"demos/05_aggregating_data_joins/#load-database","title":"Load Database\u00b6","text":"<p>NOTE: The <code>employee_small.db</code> file MUST be saved in the same folder location as this notebook on your computer.</p>"},{"location":"demos/05_aggregating_data_joins/#aggregate-functions","title":"Aggregate Functions\u00b6","text":""},{"location":"demos/05_aggregating_data_joins/#question-1","title":"Question 1\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the total number of employees for the company.</p> <p>Include only calculated column <code>employee_cnt</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-2","title":"Question 2\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the minimum, maximum, and average salary for all employees in the company.</p> <p>Include calculated columns <code>salary_min</code>, <code>salary_max</code>, <code>salary_avg</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#grouping-data","title":"Grouping Data\u00b6","text":""},{"location":"demos/05_aggregating_data_joins/#question-3","title":"Question 3\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the minimum, maximum, and average salary in each department (department_id) and order the results by average salary in descending order. Round the average salary to 2 decimal places.</p> <p>Include columns <code>department_id</code> as well as calculated columns <code>dept_min_salary</code>, <code>dept_max_salary</code>, <code>dept_avg_salary</code>, <code>employee_cnt</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#joins","title":"JOINs\u00b6","text":""},{"location":"demos/05_aggregating_data_joins/#question-4","title":"Question 4\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the employee with the Programmer title that has the lowest salary.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>salary</code>, <code>job_title</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-5","title":"Question 5\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the minimum, maximum, and average salary in each department (department_name) and order the results by average salary in descending order. Round the average salary to 2 decimal places.</p> <p>Include columns <code>department_name</code> as well as calculated columns <code>dept_min_salary</code>, <code>dept_max_salary</code>, <code>dept_avg_salary</code>, <code>employee_cnt</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-6","title":"Question 6\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the minimum, maximum, and average salary in each department with at least 5 employees and order the results by average salary in descending order. Round the average salary to 2 decimal places.</p> <p>Include columns <code>department_name</code> as well as calculated columns <code>dept_min_salary</code>, <code>dept_max_salary</code>, <code>dept_avg_salary</code>, <code>employee_cnt</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-7","title":"Question 7\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees that have no dependents.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>department_name</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-8","title":"Question 8\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the number of dependents per employee in the Sales and Executive departments. Employees that have no dependents should be zero and order the results by the number of dependents in descending order and then by employee id in ascending order.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>department_name</code> as well as calculated columns <code>dependent_cnt</code>.</p>"},{"location":"demos/05_aggregating_data_joins/#question-9","title":"Question 9\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees that make less than 50% of their max salary for the job title and order the results by their salary in ascending order and then by employee id in ascending order.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>salary</code>, <code>job_title</code> as well as alias columns <code>job_max_salary</code>. Use <code>max_salary</code> from <code>job</code> instead of calculating the max salary for all employees.</p>"},{"location":"demos/05_aggregating_data_joins/#question-10","title":"Question 10\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees that have a manager that is not in the same department. Employees that do not have a manager should be included in the results. Order the results by their salary in descending order and then by employee id in ascending order.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>salary</code>, <code>department_name</code> as well as alias columns <code>manager_first_name</code>, <code>manager_last_name</code>, <code>manager_department_name</code>.</p>"},{"location":"demos/06_case_custom_joins/","title":"06 case custom joins","text":"CASE and Custom JOINs Demo Overview <p>In this demo, we will continue using the small sample <code>employee</code> database courtesy of https://www.sqltutorial.org/ to get some hands-on practice with the concepts we learned in the <code>Intermediate_SQL</code> Part 2 lecture.</p> <p>Download the resource files for this demo here.</p> <p></p> In\u00a0[1]: Copied! <pre>import sqlite3\n\n%load_ext sql\n\n%sql sqlite:///employee_small.db\n</pre> import sqlite3  %load_ext sql  %sql sqlite:///employee_small.db Connecting to 'sqlite:///employee_small.db' <p>IMPORTANT: Every query that you write in a Jupyter Notebook cell must have the %%sql command directly above the <code>SELECT</code> statement.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name phone_number area_code 120 Matthew Weiss 650.123.1234 650 121 Adam Fripp 650.123.2234 650 122 Payam Kaufling 650.123.3234 650 123 Shanta Vollman 650.123.4234 650 126 Irene Mikkilineni 650.124.1224 650 192 Sarah Bell 650.501.1876 650 193 Britney Everett 650.501.2876 650 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 1.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id first_name last_name hire_date hire_year 106 Valli Pataballa 1998-02-05 1998 112 Jose Manuel Urman 1998-03-07 1998 118 Guy Himuro 1998-11-15 1998 126 Irene Mikkilineni 1998-09-28 1998 176 Jonathon Taylor 1998-03-24 1998 177 Jack Livingston 1998-04-23 1998 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 2.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_name min_salary_pctg_diff_group employee_cnt Accounting &gt;= 25% 2 Administration &gt;= 25% 1 Executive &lt; 25% 3 Finance &gt;= 25% 6 Human Resources &gt;= 25% 1 IT &lt; 25% 3 IT &gt;= 25% 2 Marketing &gt;= 25% 2 Public Relations &gt;= 25% 1 Purchasing &lt; 25% 5 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 3.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_name min_salary_pctg_diff_group employee_cnt Accounting 25% - 100% 2 Administration 25% - 100% 1 Executive &lt; 25% 3 Finance 25% - 100% 5 Finance &gt; 100% 1 Human Resources 25% - 100% 1 IT 25% - 100% 1 IT &lt; 25% 3 IT &gt; 100% 1 Marketing 25% - 100% 2 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 4.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: department_name less_than_25_pctg Purchasing 83.33 IT 60.0 Sales 33.33 Shipping 14.29 Finance 0.0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 5.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id employee_full_name hire_date job_title salary 100 Steven King 1987-06-17 President 24000.0 101 Neena Kochhar 1989-09-21 Administration Vice President 17000.0 102 Lex De Haan 1993-01-13 Administration Vice President 17000.0 145 John Russell 1996-10-01 Sales Manager 14000.0 146 Karen Partners 1997-01-05 Sales Manager 13500.0 201 Michael Hartstein 1996-02-17 Marketing Manager 13000.0 205 Shelley Higgins 1994-06-07 Accounting Manager 12000.0 108 Nancy Greenberg 1994-08-17 Finance Manager 12000.0 114 Den Raphaely 1994-12-07 Purchasing Manager 11000.0 204 Hermann Baer 1994-06-07 Public Relations Representative 10000.0 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 6.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: region country_name employee_cnt North America United States of America 30 Europe United Kingdom 7 North America Canada 2 Europe Germany 1 South America Argentina 0 Asia Australia 0 Europe Belgium 0 South America Brazil 0 Asia China 0 Europe Denmark 0 Truncated to displaylimit of 10. <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 7.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: north_america_employee_cnt total_employee_cnt north_america_employee_pctg 32 40 80.0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 8.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id employee_full_name hire_date job_title salary 100 Steven King 1987-06-17 President 24000.0 101 Neena Kochhar 1989-09-21 Administration Vice President 17000.0 102 Lex De Haan 1993-01-13 Administration Vice President 17000.0 145 John Russell 1996-10-01 Sales Manager 14000.0 146 Karen Partners 1997-01-05 Sales Manager 13500.0 201 Michael Hartstein 1996-02-17 Marketing Manager 13000.0 205 Shelley Higgins 1994-06-07 Accounting Manager 12000.0 108 Nancy Greenberg 1994-08-17 Finance Manager 12000.0 114 Den Raphaely 1994-12-07 Purchasing Manager 11000.0 <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 9.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>  Expected Output:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> Running query in 'sqlite:///employee_small.db' Out[\u00a0]: employee_id employee_full_name job_title salary manager_full_name 107 Diana Lorentz Programmer 4200.0 Alexander Hunold <p>Copy and paste the code into the <code>submission.yaml</code> file for Question 10.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"demos/06_case_custom_joins/#how-is-the-data-organized","title":"How is the data organized\u00b6","text":"<p>Below is the ERD for employee_small databases.</p>"},{"location":"demos/06_case_custom_joins/#load-database","title":"Load Database\u00b6","text":"<p>NOTE: The <code>employee_small.db</code> file MUST be saved in the same folder location as this notebook on your computer.</p>"},{"location":"demos/06_case_custom_joins/#string-and-date-functions","title":"String and Date Functions\u00b6","text":""},{"location":"demos/06_case_custom_joins/#question-1","title":"Question 1\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees with a 650 area code. You may use any method to filter for <code>area_code</code> in the WHERE clause but you must use a string function to return the <code>area_code</code> in the SELECT clause. Order by <code>employee_id</code> in ascending order.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>phone_number</code> and calculated column <code>area_code</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-2","title":"Question 2\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees that were hired in 1998. You may use any method to filter for <code>hire_date</code> in the WHERE clause but you must use a date function to return the <code>hire_year</code> in the SELECT clause. Order by <code>employee_id</code> in ascending order.</p> <p>Include columns <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, <code>hire_date</code> and calculated column <code>hire_year</code>.</p>"},{"location":"demos/06_case_custom_joins/#case-statements","title":"CASE Statements\u00b6","text":""},{"location":"demos/06_case_custom_joins/#question-3","title":"Question 3\u00b6 Write Your Code Below:","text":"<p>Write a query that identifies the number of employees by department that make less than 25% higher than the <code>min_salary</code> for their job. Create a custom calculated field <code>min_salary_pctg_diff_group</code> that groups employees into <code>&lt; 25%</code> and <code>&gt;= 25%</code> categories. Order by department in ascending order and then by <code>min_salary_pctg_diff_group</code> in ascending order.</p> <p>Include column <code>department_name</code> as well as calculated columns <code>min_salary_pctg_diff_group</code>, <code>employee_cnt</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-4","title":"Question 4\u00b6 Write Your Code Below:","text":"<p>Building on question 3. Write a query that identifies the number of employees by department that now groups employees into <code>&lt; 25%</code>, <code>&gt; 100%</code>, and <code>25% - 100%</code> categories. Order by department in ascending order and then by min_salary_pctg_diff_group in ascending order.</p> <p>Include columns <code>department_name</code> as well as calculated columns <code>min_salary_pctg_diff_group</code>, <code>employee_cnt</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-5","title":"Question 5\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the % of employees that make less than 25% in each department with at least 4 employees. Order by the less than 25 percentage calculated field in descending order, round the percentage to 2 decimal places and express as a percentage but without the % sign.</p> <p>Include columns <code>department_name</code> as well as calculated columns <code>less_than_25_pctg</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-6","title":"Question 6\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees with a salary that is greater than the salary for the IT department manager. You can hard code the managers employee_id in a JOIN or WHERE clause condition. Order by salary in descending order and then hire date in ascending order.</p> <p>Include columns <code>employee_id</code>, calculated field <code>employee_full_name</code> in the format first name and last name with a space in between names, as well as columns <code>hire_date</code>, <code>job_title</code>, <code>salary</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-7","title":"Question 7\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the number of employees by region and country but rename the region name North America for USA, Canada, and Mexico countries, all other Americas as South America then use <code>region_name</code> for all others. Include all countries even if they have no employees. Order by the number employees in descending order and then by country name in ascending order.</p> <p>Include updated calculated column <code>region_name</code>, column <code>country_name</code>, and calculated column <code>employee_cnt</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-8","title":"Question 8\u00b6 Write Your Code Below:","text":"<p>Write a query that returns the % of employees that work in North America. Round the percentage to 2 decimal places and express as a percentage but without the % sign. The count calculated fields should be whole numbers.</p> <p>Include calculated columns <code>north_america_employee_cnt</code>, <code>total_employee_cnt</code>, <code>north_america_employee_pctg</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-9","title":"Question 9\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees with a salary that is greater than the max salary for Programmers. Order by salary in descending order and then hire date in ascending order.</p> <p>Include columns <code>employee_id</code>, calculated field <code>employee_full_name</code> in the format first name and last name with a space in between names, as well as columns <code>hire_date</code>, <code>job_title</code>, <code>salary</code>.</p>"},{"location":"demos/06_case_custom_joins/#question-10","title":"Question 10\u00b6 Write Your Code Below:","text":"<p>Write a query that returns all employees with a salary that is less than 50% of their manager that shares the same job title.</p> <p>Include columns <code>employee_id</code>, calculated field <code>employee_full_name</code> in the format first name and last name with a space in between names, columns <code>job_title</code>, <code>salary</code>, and calculated column <code>manager_full_name</code> in the same format as the employee.</p>"},{"location":"demos/08_subquery_cte_window_functions/","title":"Subqueries, CTEs, and Window Functions","text":""},{"location":"demos/08_subquery_cte_window_functions/#overview","title":"Overview","text":"<p>In this demo, we will be using DBeaver Community Edition to write some queries using the employee_small.db to demonstrate how to use subqueries, CTEs, and window functions to tackle some interesting questions. We will also demonstrate how to use the <code>Explain Execution Plan</code> in DBeaver as well as the <code>EXPLAIN</code> and <code>EXPLAIN ANALYZE</code> SQL keywords for SQLite, MySQL, and PostgreSQL. Click here to download the starter <code>.sql</code> file for this demo.</p>"},{"location":"demos/08_subquery_cte_window_functions/#question-1","title":"Question 1","text":"<p>Write a query that returns all employees that make more than 50% of the highest paid employee in the company. Order by salary in descending order and then by hire date in ascending order.</p> <p>Here is the output:</p> <p></p>"},{"location":"demos/08_subquery_cte_window_functions/#question-2","title":"Question 2","text":"<p>Write a query that returns all employees whose salary is higher than the average salary of all employees in their department. Order the results by department_id in ascending order and salary in descending order.</p> <p>We will tackle this question 4 different ways:</p> <ol> <li>Subquery with a JOIN</li> <li>Correlated subquery</li> <li>CTE with a JOIN</li> <li>Aggregate and window function</li> </ol> <p>The preferred option should be based on query performance and column requirements for the output.</p> <p>Pin Tabs</p> <p>Demonstrate how to pin output tabs in DBeaver!</p> <p>Here is the output:</p> <p></p>"},{"location":"demos/08_subquery_cte_window_functions/#question-3","title":"Question 3","text":"<p>Write a query that returns the top 3 employees based on salary in each department. Assign ranks sequentially with no gaps in the case of ties. Order by department name in ascending order and then salary in descending order.</p> <p>Here is the sample output:</p> <p></p> <p>Ranking Function Differences</p> <p>Demonstrate the difference in output for the three ranking window functions!</p>"},{"location":"demos/08_subquery_cte_window_functions/#question-4","title":"Question 4","text":"<p>Write a query that returns all employees that work in a department that has a 200% difference between the min and max salary in the department. Return the min and max department salary as well as the department salary % difference. Round the percentage to 2 decimal places and express as a percentage but without the % sign.</p> <p>We will tackle this question using chained CTEs.</p> <p>Analytic Function Differences</p> <p>Demonstrate the difference in output for <code>FIRST_VALUE()</code> and <code>LAST_VALUE()</code> window functions!</p> <p>Here is the output:</p> <p></p> <p>Let's wrap this up and demonstrate all 4 of the query options for Question 2 in PostgreSQL and compare the EXPLAIN output.</p>"},{"location":"demos/08_subquery_cte_window_functions/#conclusion","title":"Conclusion","text":"<p>In this demo, we used DBeaver to write some advanced SQL queries.</p>"},{"location":"labs/07_transform_load_data/","title":"Transform and Load Data","text":""},{"location":"labs/07_transform_load_data/#overview","title":"Overview","text":"<p>In this lab, you will be using SQL to transform raw Spotify music data containing information about an album, artist(s), tracks, and genre(s) all in a single table into a relational database. In practice, there are ETL (Extract, Transform, and Load) tools to handle similar tasks but we will be leveraging our new SQL skills to handle the job.</p> <p>Click here to download all resources needed for the lab. Here is a summary of the contents in the <code>music_resources.zip</code> file:</p> <ol> <li><code>music.db</code> database with all tables created. The <code>stage_music_data</code> table has been pre-loaded with 375,141 rows of data.</li> <li>The <code>transform_load_music_data_student.sql</code> file is where you will be writing all of your SQL code to transform and load the data into the database tables.</li> <li>The <code>submission.yaml</code> file for all of the questions below.</li> </ol> <p>Here is an ERD for the <code>music</code> database:</p> <p></p> <p>Acknowledgment</p> <p>The original version of this data came from the Spotify Web API but the raw data used to load into the stage table came courtesy of this Kaggle dataset.</p>"},{"location":"labs/07_transform_load_data/#getting-started","title":"Getting Started","text":"<p>Open the <code>music.db</code> file with DB Browser and click on the Database Structure tab to see all 7 tables in the database.</p> <p></p> <p>Click on the Browse Data tab and then select the <code>stage_music_data</code> table from the drop-down and review the general structure of the table and values so you have an idea of what you will be working with.</p> <p></p> <p>Click on the Execute SQL tab and then click on the yellow folder icon and then navigate to the folder that you saved the resource files and open the <code>transform_load_music_data_student.sql</code> file.</p> <p></p> <p>The SQL script is organized in two sections:</p>"},{"location":"labs/07_transform_load_data/#part-1-drop-and-create-tables","title":"Part 1: Drop and Create Tables","text":"<p>Do NOT make any changes in the Part 1: Drop and Create Tables section. You are likely to make mistakes as you are loading the database so you may need to recreate the tables to refresh the database. Upon completion of this lab, you should be able to run the entire SQL script file repeatedly to recreate and load the database tables.</p> <p>Warning</p> <p>The Drop and Create Table statements should NOT be included in the the <code>submission.yaml</code> file.</p>"},{"location":"labs/07_transform_load_data/#part-2-transform-and-load-tables","title":"Part 2: Transform and Load Tables","text":"<p>This is where you will be writing all of your SQL for each task. Each task will also correspond to a respective question in the <code>submission.yaml</code> file for the autograder.</p> <p>In <code>CP2_CRUD_Operations</code> and <code>HW3_CRUD_Operations</code>, you created new data by writing simple <code>INSERT INTO</code> statements 1 row at a time. In this lab, you will be loading the tables with <code>INSERT INTO</code> statements but instead of <code>VALUES()</code>, you will be using a <code>SELECT</code> statement. Here is a generic example:</p> <pre><code>INSERT INTO table (column1, column2) \nSELECT\n  source_data1 as column1,\n  source_data2 as column2\nFROM source_table;\n</code></pre>"},{"location":"labs/07_transform_load_data/#task-1","title":"Task 1","text":"<p>Write a <code>SELECT</code> statement to <code>INSERT INTO</code> artist table from the stage_music_data table. Due to duplicates in the stage data for each track over time, we will use the MAX value for artist_popularity and followers for each artist. If you review the <code>stage_music_data</code> table, you will see there are <code>artist_n</code> columns for each of the artists on the track, an <code>artist_id</code> column as well as a <code>name</code> column. We only have the <code>artist_id</code> for the primary artist on the track so you will use the <code>artist_id</code> and <code>name</code> columns for this task.</p> <p>After completing the <code>INSERT INTO</code> statement, run the following to validate the stats in the table:</p> <pre><code>SELECT \n  ROUND(AVG(artist_popularity),2) AS artist_popularity_avg,\n  ROUND(AVG(followers),2) AS followers_avg,\n  COUNT(*) AS artist_cnt\nFROM artist;\n</code></pre> <p>Here is the output:</p> <p></p> <p>Run the following to check the column values for the top 10 artists based on followers:</p> <pre><code>SELECT \n  artist_id,\n  artist_name,\n  artist_popularity,\n  followers\nFROM artist\nORDER BY\n  followers DESC\nLIMIT 10;\n</code></pre> <p>Here is the output:</p> <p></p>"},{"location":"labs/07_transform_load_data/#question-1","title":"Question 1","text":"<p>Copy and paste the code for the <code>INSERT INTO</code> statement above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 1.</p> <p>Warning</p> <p>Be sure to have <code>;</code> in between all SQL statements in the <code>submission.yaml</code> file.</p>"},{"location":"labs/07_transform_load_data/#question-2","title":"Question 2","text":"<p>The <code>SELECT</code> statement to check the column values for the top 10 artists based on <code>followers</code> is provided in the <code>submission.yaml</code> file for Question 2.</p>"},{"location":"labs/07_transform_load_data/#task-2-part-a","title":"Task 2: Part a","text":"<p>Write multiple <code>SELECT</code> statements to <code>INSERT INTO</code> genre table from the stage_music_data table. Think about how you might approach combining the data into rows from 5 separate genre_n columns.</p> <p>IMPORTANT</p> <p>The genre table leverages the SQLite built in rowid for the genre_id column. The first <code>INSERT INTO</code> statement has been included so you can see the example format for this task.</p> <p>The <code>genre</code> table does not have a direct validation in the <code>submission.yaml</code> file. The genre counts will be validated in Task  </p>"},{"location":"labs/07_transform_load_data/#task-2-part-b","title":"Task 2: Part b","text":"<p>Write multiple <code>SELECT</code> statements to <code>INSERT INTO</code> artist_genres table from the <code>stage_music_data</code> table.</p> <p>Tips</p> <p>This is the first instance a <code>JOIN</code> will be needed since you will need genre_id from part a for each of the genre fields. Think about how you can join to <code>genre</code> to get the newly generated <code>genre_id</code> artificial key.</p> <p>After completing the <code>INSERT INTO</code> statements, run the following to validate the counts in the tables:</p> <pre><code>SELECT\n  g.genre,\n  COUNT(DISTINCT artist_id) AS artist_cnt,\n  (SELECT COUNT(genre_id) FROM genre) AS genre_cnt\nFROM artist_genres ag\nINNER JOIN genre g ON ag.genre_id = g.genre_id\nGROUP BY\n  g.genre\nORDER BY\n  COUNT(DISTINCT artist_id) DESC\nLIMIT 10;\n</code></pre> <p>Here is the output:</p> <p></p>"},{"location":"labs/07_transform_load_data/#question-3","title":"Question 3","text":"<p>Copy and paste the code for ALL of the <code>INSERT INTO</code> statements from Part a and b above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 3.</p>"},{"location":"labs/07_transform_load_data/#task-3","title":"Task 3","text":"<p>Write a <code>SELECT</code> statement to <code>INSERT INTO</code> album table from the stage_music_data table.</p> <p>Tips</p> <p>This is a simple SELECT statement for the album specific fields. Do NOT do any conversions on the release_date in the <code>stage_music_data</code> table.</p> <p>After completing the <code>INSERT INTO</code> statement, run the following to validate the stats in the table:</p> <pre><code>SELECT \n  ROUND(AVG(album_popularity),2) AS album_popularity_avg,\n  COUNT(DISTINCT album_type) AS album_type_cnt,\n  COUNT(DISTINCT label) AS label_cnt,\n  COUNT(*) AS album_cnt\nFROM album;\n</code></pre> <p>Here is the output:</p> <p></p> <p>Run the following to check the column values for the top 10 artists based on followers:</p> <pre><code>SELECT \n  album_id, \n  album_name, \n  album_type, \n  label, \n  album_popularity,\n  release_date\nFROM album\nORDER BY\n  album_popularity DESC,\n  release_date\nLIMIT 10;\n</code></pre> <p>Here is the output:</p> <p></p>"},{"location":"labs/07_transform_load_data/#question-4","title":"Question 4","text":"<p>Copy and paste the code for the <code>INSERT INTO</code> statement above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 4.</p>"},{"location":"labs/07_transform_load_data/#question-5","title":"Question 5","text":"<p>The <code>SELECT</code> statement to check the column values for the top 10 albums based on <code>album_popularity</code> is provided in the <code>submission.yaml</code> file for Question 5.</p>"},{"location":"labs/07_transform_load_data/#task-4","title":"Task 4","text":"<p>Write a <code>SELECT</code> statement to <code>INSERT INTO</code> track table from the stage_music_data table.</p> <p>Tips</p> <p>This is also simple <code>SELECT</code> statement for the track specific fields but be careful with differences in column names in the <code>stage_music_data</code> table.</p> <p>After completing the <code>INSERT INTO</code> statement, run the following to validate the stats in the table:</p> <pre><code>SELECT\n  COUNT(DISTINCT primary_artist_id) AS artist_cnt,\n  COUNT(DISTINCT album_id) AS album_cnt,\n  ROUND(AVG(track_popularity),2) AS track_popularity_avg,\n  ROUND(AVG(acousticness),2) AS acousticness_avg,\n  ROUND(AVG(danceability),2) AS danceability_avg,\n  ROUND(AVG(energy),2) AS energy_avg,\n  ROUND(AVG(instrumentalness),2) AS instrumentalness_avg,\n  ROUND(AVG(song_key),2) AS song_key_avg,\n  ROUND(AVG(liveness),2) AS liveness_avg,\n  ROUND(AVG(loudness),2) AS loudness_avg,\n  ROUND(AVG(mode),2) AS mode_avg,\n  ROUND(AVG(speechiness),2) AS speechiness_avg,\n  ROUND(AVG(tempo),2) AS tempo_avg,\n  ROUND(AVG(valence),2) AS valence_avg,\n  COUNT(*) AS track_cnt\nFROM track;\n</code></pre> <p>Here is the output:</p> <p></p> <p>Run the following to check the column values for the top 10 tracks based on <code>track_popularity</code>:</p> <pre><code>SELECT\n  track_id, \n  primary_artist_id, \n  album_id, \n  track_number, \n  track_name, \n  track_popularity, \n  duration_ms, \n  time_signature, \n  acousticness, \n  danceability, \n  energy,\n  instrumentalness, \n  song_key, \n  liveness, \n  loudness, \n  mode, \n  speechiness, \n  tempo, \n  valence, \n  explicit\nFROM track\nORDER BY\n  track_popularity DESC,\n  track_id\nLIMIT 10\n</code></pre> <p>Here is a sample output:</p> <p></p> <p>Note</p> <p>Not all columns are displayed in the sample output.</p>"},{"location":"labs/07_transform_load_data/#question-6","title":"Question 6","text":"<p>Copy and paste the code for the <code>INSERT INTO</code> statement above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 6.</p>"},{"location":"labs/07_transform_load_data/#question-7","title":"Question 7","text":"<p>The <code>SELECT</code> statement to check the column values for the top 10 tracks based on <code>track_popularity</code> is provided in the <code>submission.yaml</code> file for Question 7.</p>"},{"location":"labs/07_transform_load_data/#task-5","title":"Task 5","text":"<p>Write multiple <code>SELECT</code> statements to <code>INSERT INTO</code> track_artists table from the stage_music_data table. This task will be similar to how you approached loading the data for artist_genres.</p> <p>Tips</p> <p><code>order_number</code> can be hard coded 1,2,3,4,5 for each artist_n (0,1,2,3,4) column. See comment above for the CREATE TABLE statement for <code>track_artists</code> regarding <code>artist_name</code> vs. <code>artist_id</code>.</p> <p>After completing the <code>INSERT INTO</code> statements, run the following to validate the stats in the table:</p> <pre><code>SELECT\n  COUNT(DISTINCT order_number) AS order_number_cnt,\n  COUNT(DISTINCT artist_name) AS artist_cnt,\n  COUNT(*) AS track_artist_cnt\nFROM track_artists;\n</code></pre> <p>Here is the output:</p> <p></p> <p>Run the following to check the column values for a sample track:</p> <pre><code>SELECT\n  *\nFROM track_artists\nWHERE track_id = '7CyPwkp0oE8Ro9Dd5CUDjW'\nORDER BY\n   order_number;\n</code></pre> <p>Here is a sample output:</p> <p></p>"},{"location":"labs/07_transform_load_data/#question-8","title":"Question 8","text":"<p>Copy and paste the code for the <code>INSERT INTO</code> statements above the <code>SELECT</code> statement into the <code>submission.yaml</code> file for Question 8.</p>"},{"location":"labs/07_transform_load_data/#question-9","title":"Question 9","text":"<p>The <code>SELECT</code> statement to check the column values for the sample track is provided in the <code>submission.yaml</code> file for Question 9.</p>"},{"location":"labs/07_transform_load_data/#part-3-validate-data","title":"Part 3: Validate Data","text":"<p>We have been validating the data as we moved along but below is a summary of each table and the expected number of rows.</p> Table Description Rows <code>album</code> Album specific information such as name, label, popularity, and release date. 67,991 <code>artist</code> Artist specific information such as name, popularity, and number of followers. 31,699 <code>artist_genres</code> All genres that an artist is associated with if any. 18,455 <code>genre</code> Genre names for all artists. 3,835 <code>track</code> Track information including name, popularity, duration, and all Spotify metrics. 375,141 <code>track_artists</code> All artists that are associated with a track. 520,428"},{"location":"labs/07_transform_load_data/#part-4-lab-submission","title":"Part 4: Lab Submission","text":"<p>Submit the completed <code>submission.yaml</code> file on Canvas/Gradescope for <code>CP5_Transform_Load_Data</code>.</p>"},{"location":"labs/07_transform_load_data/#conclusion","title":"Conclusion","text":"<p>In this demo, we used DB Browser for SQLite to write multiple SQL queries to transform raw Spotify music data into a relational database.</p>"},{"location":"notes/week_1/","title":"Week 1 - Intro / ER Models","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Understand database fundamentals, including history, key roles and definitions, challenges of data management, differences between small and large-scale systems, and an introduction to relational databases, SQL, and the phases of database design.</li> <li>Understand database design within the SDLC, focusing on ER modeling and diagramming (Chen and Crow\u2019s Foot notation), and develop skills to analyze business requirements and represent entities, attributes, and relationships in an ERD.</li> </ul>"},{"location":"notes/week_1/#class-agenda","title":"Class Agenda","text":"<ul> <li>Introduction Slides</li> <li>Course Website Tour</li> <li><code>[5 min]</code> Break Optional</li> <li>ER Models Slides</li> <li>Create a Conceptual ERD Demo</li> </ul>"},{"location":"notes/week_1/#task-list","title":"Task List","text":"<ul> <li> Optional Reading: Chapters 1, 2, 4</li> <li> Submit names for Assignment groups on Canvas</li> <li> Complete and Submit Quiz 1</li> <li> Complete and Submit HW1 Create ERD</li> </ul>"},{"location":"notes/week_1/#additional-resources","title":"Additional Resources","text":"<p>Chen Notation Crow's Foot Notation</p>"},{"location":"notes/week_2/","title":"Week 2 - Relational Databases","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Develop a strong foundation in database theory, including the history of database models, the relational model, keys (primary and foreign), referential integrity, and normalization principles.</li> <li>Apply conceptual knowledge by converting entity-relationship models into logical database designs and understanding the rules that guide relational structures.</li> <li>Gain practical skills in database implementation by creating databases and writing SQL to define tables, constraints, and relationships.</li> </ul>"},{"location":"notes/week_2/#class-agenda","title":"Class Agenda","text":"<ul> <li>Relational Databases Slides</li> <li><code>[5 min]</code> Break Optional</li> <li>Implement Conceptual ERD Demo</li> </ul>"},{"location":"notes/week_2/#task-list","title":"Task List","text":"<ul> <li> Optional Reading: Chapters 3, 6</li> <li> Complete and Submit CP0 Autograder Warmup by EOD</li> <li> Complete and Submit Quiz 2</li> <li> Install MySQL Workbench 8.0 for next weeks demo</li> </ul>"},{"location":"notes/week_2/#additional-resources","title":"Additional Resources","text":"<p>MySQL Workbench Installation</p>"},{"location":"notes/week_3/","title":"Week 3 - Create Database and ERD","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Create a database using MySQL Workbench, reverse engineer an ERD, and modify the relationships to reflect the business rules for optionality.</li> <li>Create an ERD using QuickDBD and Export the SQL to create the database.</li> </ul>"},{"location":"notes/week_3/#class-agenda","title":"Class Agenda","text":"<ul> <li>Create Database and ERD Demo</li> <li><code>[5 min]</code> Break Optional</li> <li>In Class Time for CP1 Create Database</li> </ul>"},{"location":"notes/week_3/#task-list","title":"Task List","text":"<ul> <li> Complete and Submit CP1 Create Database by EOD</li> <li> Complete and Submit HW2 Create Database and ERD</li> </ul> <p>Note</p> <p>Crow's Foot notation ERD is NOT required for CP1.</p>"},{"location":"notes/week_3/#additional-resources","title":"Additional Resources","text":"<p>Overview of QuickDBD</p>"},{"location":"notes/week_4/","title":"Week 4 - SQL Basics","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Build a foundational understanding of SQL, covering ANSI standards, query formatting, how to construct basic statements, and the difference between the written order of a query and how it is actually executed.</li> <li>Learn to construct SQL queries to perform basic CRUD operations and introduce common operators and functions.</li> <li>Gain hands-on experience performing CRUD operations on a real database.</li> </ul>"},{"location":"notes/week_4/#class-agenda","title":"Class Agenda","text":"<ul> <li>SQL Basics Slides</li> <li><code>[5 min]</code> Break Optional</li> <li>CRUD Operations Demo</li> <li>In Class Time for CP2 CRUD Operations</li> </ul>"},{"location":"notes/week_4/#task-list","title":"Task List","text":"<ul> <li> Complete and Submit Quiz 3</li> <li> Complete and Submit CP2 CRUD Operations by EOD</li> <li> Complete and Submit HW3 CRUD Operations</li> </ul>"},{"location":"notes/week_4/#additional-resources","title":"Additional Resources","text":"<p>DB Browser Import csv to Existing Table</p>"},{"location":"notes/week_5/","title":"Week 5 - Intermediate SQL 1","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Learn to summarize and analyze numerical data using aggregate functions, the GROUP BY and HAVING clauses, and understand how differences in RDBMS functionality can affect column alias usage.</li> <li>Understand how to combine data from multiple tables using various JOIN types and determine when each is most appropriate based on the analytical goal.</li> <li>Gain hands-on experience aggregating data and joining tables with a real database.</li> </ul>"},{"location":"notes/week_5/#class-agenda","title":"Class Agenda","text":"<ul> <li>Intermediate SQL 1 Slides</li> <li><code>[5 min]</code> Break Optional</li> <li>Aggregating Data and JOINs Demo</li> <li>In Class Time for CP3 Intermediate SQL 1</li> </ul>"},{"location":"notes/week_5/#task-list","title":"Task List","text":"<ul> <li> Submit a list of Group Project names before the end of class. Must be between 3-5 students per group.</li> <li> Complete and Submit CP3 Intermediate SQL 1 by EOD</li> <li> Start working on HW4 Intermediate SQL</li> <li> Start working on GP1 Create Database and ERD</li> </ul>"},{"location":"notes/week_5/#additional-resources","title":"Additional Resources","text":"<p>Installing Anaconda JupySQL User Guide</p>"},{"location":"notes/week_6/","title":"Week 6 - Intermediate SQL 2","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Learn to manipulate and transform data using string functions, CASE statements, and data type conversions.</li> <li>Understand how to combine and compare data across tables using UNION/UNION ALL, non-equi joins, and self-joins.</li> <li>Gain hands-on experience with CASE statements and joining tables with custom operators with a real database.</li> </ul>"},{"location":"notes/week_6/#class-agenda","title":"Class Agenda","text":"<ul> <li>Intermediate SQL 2 Slides</li> <li><code>[5 min]</code> Break Optional</li> <li>CASE and Custom JOINs Demo</li> <li>In Class Time for CP4 Intermediate SQL 2</li> </ul>"},{"location":"notes/week_6/#task-list","title":"Task List","text":"<ul> <li> Complete and Submit Quiz 4</li> <li> Complete and Submit CP4 Intermediate SQL 2 by EOD</li> <li> Complete and Submit HW4 Intermediate SQL</li> <li> Complete and Submit GP1 Create Database and ERD</li> </ul>"},{"location":"notes/week_7/","title":"Week 7 - Advanced SQL 1","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Understand how to apply subqueries and correlated subqueries to perform more complex data retrieval, dynamic filtering, and row-level comparisons.</li> <li>Learn to use Common Table Expressions (CTEs) to simplify and organize complex SQL queries into clearer, reusable steps.</li> <li>Gain hands-on experience with INSERT INTO .. SELECT and UNION/UNION ALL statements to transform raw data from a single stage table into a relational database.</li> </ul>"},{"location":"notes/week_7/#class-agenda","title":"Class Agenda","text":"<ul> <li>Advanced SQL 1 Slides</li> <li>In Class Time for CP5 Transform and Load Data</li> </ul>"},{"location":"notes/week_7/#task-list","title":"Task List","text":"<ul> <li> Complete and Submit CP5 Transform and Load Data by EOD</li> <li> Start working on HW5 Advanced SQL</li> </ul>"},{"location":"notes/week_8/","title":"Week 8 - Advanced SQL 2","text":"<p>Learning Objectives</p> <p>After today's class, you should be able to:</p> <ul> <li>Understand how to identify and apply window functions to perform calculations across related rows, and how to adjust the window frame parameters to control which rows are included in each calculation.</li> <li>Understand the architecture and performance of database systems, including core components (query processor, storage and transaction managers, logs) and how execution plans are used to analyze and optimize query performance.</li> <li>Gain hands-on experience with subqueries, CTEs, and window functions with a real database.</li> </ul>"},{"location":"notes/week_8/#class-agenda","title":"Class Agenda","text":"<ul> <li>Advanced SQL 2 Slides: Click here to join the Slido</li> <li>Advanced Database Concepts Slides</li> <li>Subqueries, CTEs, and Window Functions Demo</li> </ul>"},{"location":"notes/week_8/#task-list","title":"Task List","text":"<ul> <li> Complete and Submit Quiz 5</li> <li> Complete and Submit GP2 Transform and Load Data</li> <li> Continue working on HW5 Advanced SQL</li> </ul>"}]}